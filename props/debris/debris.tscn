[gd_scene load_steps=7 format=2]

[ext_resource path="res://props/debris/debris_0.001.png" type="Texture" id=1]


[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;
uniform sampler2D texture_1;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF.001'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node1_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node1_out0_color;
	float node1_out1_alpha;
	
	node1_in0_vector = vec3(UV, 0.0);
	node_tex_image(node1_in0_vector, texture_0, node1_out0_color, node1_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node2_in0_basecolor = node1_out0_color;
	float node2_in1_subsurface = float(0.0);
	vec3 node2_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node2_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node2_in4_metallic = float(0.0);
	float node2_in5_specular = float(0.5);
	float node2_in6_speculartint = float(0.0);
	float node2_in7_roughness = float(0.5);
	float node2_in8_anisotropic = float(0.0);
	float node2_in9_anisotropicrotation = float(0.0);
	float node2_in10_sheen = float(0.0);
	float node2_in11_sheentint = float(0.5);
	float node2_in12_clearcoat = float(0.0);
	float node2_in13_clearcoatroughness = float(0.029999999329447746);
	float node2_in14_ior = float(1.4500000476837158);
	float node2_in15_transmission = float(0.0);
	float node2_in16_transmissionroughness = float(0.0);
	vec4 node2_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node2_in18_alpha = float(1.0);
	vec3 node2_in19_normal = NORMAL;
	vec3 node2_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node2_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node2_bsdf_out0_albedo;
	float node2_bsdf_out1_sss_strength;
	float node2_bsdf_out3_specular;
	float node2_bsdf_out2_metallic;
	float node2_bsdf_out4_roughness;
	float node2_bsdf_out5_clearcoat;
	float node2_bsdf_out6_clearcoat_gloss;
	float node2_bsdf_out7_anisotropy;
	float node2_bsdf_out8_transmission;
	float node2_bsdf_out9_ior;
	
	node_bsdf_principled(node2_in0_basecolor, node2_in1_subsurface,
		node2_in3_subsurfacecolor, node2_in4_metallic, node2_in5_specular,
		node2_in7_roughness, node2_in12_clearcoat, node2_in13_clearcoatroughness,
		node2_in8_anisotropic, node2_in15_transmission, node2_in14_ior,
		node2_bsdf_out0_albedo, node2_bsdf_out1_sss_strength, node2_bsdf_out2_metallic,
		node2_bsdf_out3_specular, node2_bsdf_out4_roughness, node2_bsdf_out5_clearcoat,
		node2_bsdf_out6_clearcoat_gloss, node2_bsdf_out7_anisotropy,
		node2_bsdf_out8_transmission, node2_bsdf_out9_ior);
	
	
	// node: 'Principled BSDF.002'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node4_in0_basecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node4_in1_subsurface = float(0.0);
	vec3 node4_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node4_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node4_in4_metallic = float(0.0);
	float node4_in5_specular = float(0.5);
	float node4_in6_speculartint = float(0.0);
	float node4_in7_roughness = float(0.5);
	float node4_in8_anisotropic = float(0.0);
	float node4_in9_anisotropicrotation = float(0.0);
	float node4_in10_sheen = float(0.0);
	float node4_in11_sheentint = float(0.5);
	float node4_in12_clearcoat = float(0.0);
	float node4_in13_clearcoatroughness = float(0.029999999329447746);
	float node4_in14_ior = float(1.4500000476837158);
	float node4_in15_transmission = float(0.0);
	float node4_in16_transmissionroughness = float(0.0);
	vec4 node4_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node4_in18_alpha = float(1.0);
	vec3 node4_in19_normal = NORMAL;
	vec3 node4_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node4_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node4_bsdf_out0_albedo;
	float node4_bsdf_out1_sss_strength;
	float node4_bsdf_out3_specular;
	float node4_bsdf_out2_metallic;
	float node4_bsdf_out4_roughness;
	float node4_bsdf_out5_clearcoat;
	float node4_bsdf_out6_clearcoat_gloss;
	float node4_bsdf_out7_anisotropy;
	float node4_bsdf_out8_transmission;
	float node4_bsdf_out9_ior;
	
	node_bsdf_principled(node4_in0_basecolor, node4_in1_subsurface,
		node4_in3_subsurfacecolor, node4_in4_metallic, node4_in5_specular,
		node4_in7_roughness, node4_in12_clearcoat, node4_in13_clearcoatroughness,
		node4_in8_anisotropic, node4_in15_transmission, node4_in14_ior,
		node4_bsdf_out0_albedo, node4_bsdf_out1_sss_strength, node4_bsdf_out2_metallic,
		node4_bsdf_out3_specular, node4_bsdf_out4_roughness, node4_bsdf_out5_clearcoat,
		node4_bsdf_out6_clearcoat_gloss, node4_bsdf_out7_anisotropy,
		node4_bsdf_out8_transmission, node4_bsdf_out9_ior);
	
	
	// node: 'Image Texture.001'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node5_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node5_out0_color;
	float node5_out1_alpha;
	
	node5_in0_vector = vec3(UV, 0.0);
	node_tex_image(node5_in0_vector, texture_1, node5_out0_color, node5_out1_alpha);
	
	
	ALBEDO = node2_bsdf_out0_albedo;
	SSS_STRENGTH = node2_bsdf_out1_sss_strength;
	SPECULAR = node2_bsdf_out3_specular;
	METALLIC = node2_bsdf_out2_metallic;
	ROUGHNESS = node2_bsdf_out4_roughness;
	CLEARCOAT = node2_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node2_bsdf_out6_clearcoat_gloss;
	NORMAL = node2_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node2_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node2_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node2_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/texture_0 = ExtResource( 1 )

[sub_resource type="ArrayMesh" id=3]
resource_name = "debris001"
blend_shape_mode = 0
blend_shape/names = PoolStringArray( "base", "large1", "small1" )
blend_shape/mode = 0
surfaces/0 = {
"aabb": AABB( -9.00362, -6.89308, -10.7736, 20.9472, 12.2868, 21.1472 ),
"array_data": PoolByteArray( 170, 43, 227, 191, 170, 67, 72, 64, 35, 248, 39, 191, 124, 23, 250, 0, 250, 0, 130, 127, 207, 52, 128, 47, 247, 200, 142, 62, 244, 50, 188, 192, 16, 88, 183, 64, 124, 23, 250, 0, 250, 0, 130, 127, 0, 39, 15, 59, 48, 160, 151, 190, 48, 18, 165, 192, 83, 174, 46, 192, 124, 23, 250, 0, 250, 0, 130, 127, 48, 54, 143, 58, 193, 28, 185, 191, 230, 150, 10, 64, 77, 16, 105, 192, 125, 20, 7, 0, 7, 255, 130, 127, 240, 54, 63, 50, 170, 43, 227, 191, 170, 67, 72, 64, 35, 248, 39, 191, 125, 20, 7, 0, 7, 255, 130, 127, 207, 52, 128, 47, 48, 160, 151, 190, 48, 18, 165, 192, 83, 174, 46, 192, 125, 20, 7, 0, 7, 255, 130, 127, 48, 54, 143, 58, 64, 48, 59, 192, 48, 158, 203, 192, 244, 253, 158, 192, 131, 236, 5, 0, 251, 0, 130, 129, 231, 59, 79, 59, 232, 164, 27, 192, 29, 148, 220, 192, 253, 48, 146, 64, 131, 236, 5, 0, 251, 0, 130, 129, 167, 56, 176, 59, 144, 136, 127, 192, 4, 255, 159, 63, 231, 168, 103, 191, 131, 236, 5, 0, 251, 0, 130, 129, 135, 58, 96, 52, 144, 136, 127, 192, 4, 255, 159, 63, 231, 168, 103, 191, 133, 255, 228, 0, 28, 3, 133, 129, 135, 58, 96, 52, 250, 179, 69, 192, 82, 210, 115, 62, 221, 7, 151, 192, 133, 255, 228, 0, 28, 3, 133, 129, 216, 59, 224, 53, 64, 48, 59, 192, 48, 158, 203, 192, 244, 253, 158, 192, 133, 255, 228, 0, 28, 3, 133, 129, 231, 59, 79, 59, 48, 160, 151, 190, 48, 18, 165, 192, 83, 174, 46, 192, 80, 5, 159, 0, 159, 254, 176, 127, 48, 54, 143, 58, 64, 48, 59, 192, 48, 158, 203, 192, 244, 253, 158, 192, 80, 5, 159, 0, 159, 254, 176, 127, 207, 55, 79, 59, 250, 179, 69, 192, 82, 210, 115, 62, 221, 7, 151, 192, 80, 5, 159, 0, 159, 254, 176, 127, 176, 55, 224, 53, 250, 179, 69, 192, 82, 210, 115, 62, 221, 7, 151, 192, 71, 255, 151, 0, 151, 4, 185, 127, 176, 55, 224, 53, 193, 28, 185, 191, 230, 150, 10, 64, 77, 16, 105, 192, 71, 255, 151, 0, 151, 4, 185, 127, 240, 54, 63, 50, 48, 160, 151, 190, 48, 18, 165, 192, 83, 174, 46, 192, 71, 255, 151, 0, 151, 4, 185, 127, 48, 54, 143, 58, 232, 164, 27, 192, 29, 148, 220, 192, 253, 48, 146, 64, 195, 53, 97, 0, 148, 253, 190, 129, 167, 56, 176, 59, 247, 200, 142, 62, 244, 50, 188, 192, 16, 88, 183, 64, 195, 53, 97, 0, 148, 253, 190, 129, 56, 56, 15, 59, 144, 136, 127, 192, 4, 255, 159, 63, 231, 168, 103, 191, 195, 53, 97, 0, 148, 253, 190, 129, 135, 58, 96, 52, 170, 43, 227, 191, 170, 67, 72, 64, 35, 248, 39, 191, 198, 56, 97, 0, 147, 255, 192, 129, 207, 52, 128, 47, 144, 136, 127, 192, 4, 255, 159, 63, 231, 168, 103, 191, 198, 56, 97, 0, 147, 255, 192, 129, 135, 58, 96, 52, 247, 200, 142, 62, 244, 50, 188, 192, 16, 88, 183, 64, 198, 56, 97, 0, 147, 255, 192, 129, 56, 56, 15, 59, 170, 43, 227, 191, 170, 67, 72, 64, 35, 248, 39, 191, 181, 94, 218, 0, 57, 0, 143, 129, 207, 52, 128, 47, 193, 28, 185, 191, 230, 150, 10, 64, 77, 16, 105, 192, 181, 94, 218, 0, 57, 0, 143, 129, 120, 59, 63, 50, 144, 136, 127, 192, 4, 255, 159, 63, 231, 168, 103, 191, 181, 94, 218, 0, 57, 0, 143, 129, 135, 58, 96, 52, 250, 179, 69, 192, 82, 210, 115, 62, 221, 7, 151, 192, 178, 90, 214, 0, 61, 1, 146, 129, 216, 59, 224, 53, 144, 136, 127, 192, 4, 255, 159, 63, 231, 168, 103, 191, 178, 90, 214, 0, 61, 1, 146, 129, 135, 58, 96, 52, 193, 28, 185, 191, 230, 150, 10, 64, 77, 16, 105, 192, 178, 90, 214, 0, 61, 1, 146, 129, 120, 59, 63, 50, 48, 160, 151, 190, 48, 18, 165, 192, 83, 174, 46, 192, 49, 140, 243, 0, 221, 255, 135, 127, 48, 54, 143, 58, 247, 200, 142, 62, 244, 50, 188, 192, 16, 88, 183, 64, 49, 140, 243, 0, 221, 255, 135, 127, 0, 39, 15, 59, 232, 164, 27, 192, 29, 148, 220, 192, 253, 48, 146, 64, 49, 140, 243, 0, 221, 255, 135, 127, 63, 45, 176, 59, 232, 164, 27, 192, 29, 148, 220, 192, 253, 48, 146, 64, 59, 145, 247, 0, 235, 0, 131, 127, 63, 45, 176, 59, 64, 48, 59, 192, 48, 158, 203, 192, 244, 253, 158, 192, 59, 145, 247, 0, 235, 0, 131, 127, 207, 55, 79, 59, 48, 160, 151, 190, 48, 18, 165, 192, 83, 174, 46, 192, 59, 145, 247, 0, 235, 0, 131, 127, 48, 54, 143, 58 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 15, 0, 17, 0, 16, 0, 18, 0, 20, 0, 19, 0, 21, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 27, 0, 29, 0, 28, 0, 30, 0, 32, 0, 31, 0, 33, 0, 35, 0, 34, 0 ),
"blend_shape_data": [ PoolByteArray( 170, 43, 227, 191, 170, 67, 72, 64, 35, 248, 39, 191, 124, 23, 250, 0, 250, 0, 130, 127, 207, 52, 128, 47, 247, 200, 142, 62, 244, 50, 188, 192, 16, 88, 183, 64, 124, 23, 250, 0, 250, 0, 130, 127, 0, 39, 15, 59, 48, 160, 151, 190, 48, 18, 165, 192, 83, 174, 46, 192, 124, 23, 250, 0, 250, 0, 130, 127, 48, 54, 143, 58, 193, 28, 185, 191, 230, 150, 10, 64, 77, 16, 105, 192, 125, 20, 7, 0, 7, 255, 130, 127, 240, 54, 63, 50, 170, 43, 227, 191, 170, 67, 72, 64, 35, 248, 39, 191, 125, 20, 7, 0, 7, 255, 130, 127, 207, 52, 128, 47, 48, 160, 151, 190, 48, 18, 165, 192, 83, 174, 46, 192, 125, 20, 7, 0, 7, 255, 130, 127, 48, 54, 143, 58, 64, 48, 59, 192, 48, 158, 203, 192, 244, 253, 158, 192, 131, 236, 5, 0, 251, 0, 130, 129, 231, 59, 79, 59, 232, 164, 27, 192, 29, 148, 220, 192, 253, 48, 146, 64, 131, 236, 5, 0, 251, 0, 130, 129, 167, 56, 176, 59, 144, 136, 127, 192, 4, 255, 159, 63, 231, 168, 103, 191, 131, 236, 5, 0, 251, 0, 130, 129, 135, 58, 96, 52, 144, 136, 127, 192, 4, 255, 159, 63, 231, 168, 103, 191, 133, 255, 228, 0, 28, 3, 133, 129, 135, 58, 96, 52, 250, 179, 69, 192, 82, 210, 115, 62, 221, 7, 151, 192, 133, 255, 228, 0, 28, 3, 133, 129, 216, 59, 224, 53, 64, 48, 59, 192, 48, 158, 203, 192, 244, 253, 158, 192, 133, 255, 228, 0, 28, 3, 133, 129, 231, 59, 79, 59, 48, 160, 151, 190, 48, 18, 165, 192, 83, 174, 46, 192, 80, 5, 159, 0, 159, 254, 176, 127, 48, 54, 143, 58, 64, 48, 59, 192, 48, 158, 203, 192, 244, 253, 158, 192, 80, 5, 159, 0, 159, 254, 176, 127, 207, 55, 79, 59, 250, 179, 69, 192, 82, 210, 115, 62, 221, 7, 151, 192, 80, 5, 159, 0, 159, 254, 176, 127, 176, 55, 224, 53, 250, 179, 69, 192, 82, 210, 115, 62, 221, 7, 151, 192, 71, 255, 151, 0, 151, 4, 185, 127, 176, 55, 224, 53, 193, 28, 185, 191, 230, 150, 10, 64, 77, 16, 105, 192, 71, 255, 151, 0, 151, 4, 185, 127, 240, 54, 63, 50, 48, 160, 151, 190, 48, 18, 165, 192, 83, 174, 46, 192, 71, 255, 151, 0, 151, 4, 185, 127, 48, 54, 143, 58, 232, 164, 27, 192, 29, 148, 220, 192, 253, 48, 146, 64, 195, 53, 97, 0, 148, 253, 190, 129, 167, 56, 176, 59, 247, 200, 142, 62, 244, 50, 188, 192, 16, 88, 183, 64, 195, 53, 97, 0, 148, 253, 190, 129, 56, 56, 15, 59, 144, 136, 127, 192, 4, 255, 159, 63, 231, 168, 103, 191, 195, 53, 97, 0, 148, 253, 190, 129, 135, 58, 96, 52, 170, 43, 227, 191, 170, 67, 72, 64, 35, 248, 39, 191, 198, 56, 97, 0, 147, 255, 192, 129, 207, 52, 128, 47, 144, 136, 127, 192, 4, 255, 159, 63, 231, 168, 103, 191, 198, 56, 97, 0, 147, 255, 192, 129, 135, 58, 96, 52, 247, 200, 142, 62, 244, 50, 188, 192, 16, 88, 183, 64, 198, 56, 97, 0, 147, 255, 192, 129, 56, 56, 15, 59, 170, 43, 227, 191, 170, 67, 72, 64, 35, 248, 39, 191, 181, 94, 218, 0, 57, 0, 143, 129, 207, 52, 128, 47, 193, 28, 185, 191, 230, 150, 10, 64, 77, 16, 105, 192, 181, 94, 218, 0, 57, 0, 143, 129, 120, 59, 63, 50, 144, 136, 127, 192, 4, 255, 159, 63, 231, 168, 103, 191, 181, 94, 218, 0, 57, 0, 143, 129, 135, 58, 96, 52, 250, 179, 69, 192, 82, 210, 115, 62, 221, 7, 151, 192, 178, 90, 214, 0, 61, 1, 146, 129, 216, 59, 224, 53, 144, 136, 127, 192, 4, 255, 159, 63, 231, 168, 103, 191, 178, 90, 214, 0, 61, 1, 146, 129, 135, 58, 96, 52, 193, 28, 185, 191, 230, 150, 10, 64, 77, 16, 105, 192, 178, 90, 214, 0, 61, 1, 146, 129, 120, 59, 63, 50, 48, 160, 151, 190, 48, 18, 165, 192, 83, 174, 46, 192, 49, 140, 243, 0, 221, 255, 135, 127, 48, 54, 143, 58, 247, 200, 142, 62, 244, 50, 188, 192, 16, 88, 183, 64, 49, 140, 243, 0, 221, 255, 135, 127, 0, 39, 15, 59, 232, 164, 27, 192, 29, 148, 220, 192, 253, 48, 146, 64, 49, 140, 243, 0, 221, 255, 135, 127, 63, 45, 176, 59, 232, 164, 27, 192, 29, 148, 220, 192, 253, 48, 146, 64, 59, 145, 247, 0, 235, 0, 131, 127, 63, 45, 176, 59, 64, 48, 59, 192, 48, 158, 203, 192, 244, 253, 158, 192, 59, 145, 247, 0, 235, 0, 131, 127, 207, 55, 79, 59, 48, 160, 151, 190, 48, 18, 165, 192, 83, 174, 46, 192, 59, 145, 247, 0, 235, 0, 131, 127, 48, 54, 143, 58 ), PoolByteArray( 252, 24, 63, 65, 139, 79, 93, 63, 58, 175, 153, 192, 12, 130, 2, 0, 255, 254, 130, 127, 207, 52, 128, 47, 212, 14, 16, 193, 160, 107, 119, 191, 68, 250, 37, 65, 12, 130, 2, 0, 255, 254, 130, 127, 0, 39, 15, 59, 212, 43, 238, 192, 82, 97, 148, 191, 236, 105, 209, 192, 12, 130, 2, 0, 255, 254, 130, 127, 48, 54, 143, 58, 195, 141, 31, 65, 84, 230, 22, 190, 170, 96, 44, 193, 11, 131, 17, 0, 3, 239, 131, 127, 240, 54, 63, 50, 252, 24, 63, 65, 139, 79, 93, 63, 58, 175, 153, 192, 11, 131, 17, 0, 3, 239, 131, 127, 207, 52, 128, 47, 212, 43, 238, 192, 82, 97, 148, 191, 236, 105, 209, 192, 11, 131, 17, 0, 3, 239, 131, 127, 48, 54, 143, 58, 74, 36, 217, 192, 210, 111, 115, 64, 102, 136, 12, 193, 247, 126, 252, 0, 0, 252, 130, 129, 231, 59, 79, 59, 50, 73, 0, 193, 155, 56, 140, 64, 68, 250, 37, 65, 247, 126, 252, 0, 0, 252, 130, 129, 167, 56, 176, 59, 31, 244, 49, 65, 175, 153, 172, 64, 13, 253, 51, 192, 247, 126, 252, 0, 0, 252, 130, 129, 135, 58, 96, 52, 31, 244, 49, 65, 175, 153, 172, 64, 13, 253, 51, 192, 0, 122, 222, 0, 11, 222, 135, 129, 135, 58, 96, 52, 5, 105, 18, 65, 12, 89, 75, 64, 140, 185, 41, 193, 0, 122, 222, 0, 11, 222, 135, 129, 216, 59, 224, 53, 74, 36, 217, 192, 210, 111, 115, 64, 102, 136, 12, 193, 0, 122, 222, 0, 11, 222, 135, 129, 231, 59, 79, 59, 212, 43, 238, 192, 82, 97, 148, 191, 236, 105, 209, 192, 241, 206, 141, 0, 66, 95, 206, 127, 48, 54, 143, 58, 74, 36, 217, 192, 210, 111, 115, 64, 102, 136, 12, 193, 241, 206, 141, 0, 66, 95, 206, 127, 207, 55, 79, 59, 5, 105, 18, 65, 12, 89, 75, 64, 140, 185, 41, 193, 241, 206, 141, 0, 66, 95, 206, 127, 176, 55, 224, 53, 5, 105, 18, 65, 12, 89, 75, 64, 140, 185, 41, 193, 227, 255, 133, 0, 92, 83, 233, 127, 176, 55, 224, 53, 195, 141, 31, 65, 84, 230, 22, 190, 170, 96, 44, 193, 227, 255, 133, 0, 92, 83, 233, 127, 240, 54, 63, 50, 212, 43, 238, 192, 82, 97, 148, 191, 236, 105, 209, 192, 227, 255, 133, 0, 92, 83, 233, 127, 48, 54, 143, 58, 50, 73, 0, 193, 155, 56, 140, 64, 68, 250, 37, 65, 72, 243, 103, 0, 61, 106, 227, 129, 167, 56, 176, 59, 212, 14, 16, 193, 160, 107, 119, 191, 68, 250, 37, 65, 72, 243, 103, 0, 61, 106, 227, 129, 56, 56, 15, 59, 31, 244, 49, 65, 175, 153, 172, 64, 13, 253, 51, 192, 72, 243, 103, 0, 61, 106, 227, 129, 135, 58, 96, 52, 252, 24, 63, 65, 139, 79, 93, 63, 58, 175, 153, 192, 74, 227, 98, 0, 71, 102, 233, 129, 207, 52, 128, 47, 31, 244, 49, 65, 175, 153, 172, 64, 13, 253, 51, 192, 74, 227, 98, 0, 71, 102, 233, 129, 135, 58, 96, 52, 212, 14, 16, 193, 160, 107, 119, 191, 68, 250, 37, 65, 74, 227, 98, 0, 71, 102, 233, 129, 56, 56, 15, 59, 252, 24, 63, 65, 139, 79, 93, 63, 58, 175, 153, 192, 112, 39, 213, 0, 231, 204, 144, 129, 207, 52, 128, 47, 195, 141, 31, 65, 84, 230, 22, 190, 170, 96, 44, 193, 112, 39, 213, 0, 231, 204, 144, 129, 120, 59, 63, 50, 31, 244, 49, 65, 175, 153, 172, 64, 13, 253, 51, 192, 112, 39, 213, 0, 231, 204, 144, 129, 135, 58, 96, 52, 5, 105, 18, 65, 12, 89, 75, 64, 140, 185, 41, 193, 117, 30, 218, 0, 235, 200, 145, 129, 216, 59, 224, 53, 31, 244, 49, 65, 175, 153, 172, 64, 13, 253, 51, 192, 117, 30, 218, 0, 235, 200, 145, 129, 135, 58, 96, 52, 195, 141, 31, 65, 84, 230, 22, 190, 170, 96, 44, 193, 117, 30, 218, 0, 235, 200, 145, 129, 120, 59, 63, 50, 212, 43, 238, 192, 82, 97, 148, 191, 236, 105, 209, 192, 132, 22, 245, 0, 16, 29, 134, 127, 48, 54, 143, 58, 212, 14, 16, 193, 160, 107, 119, 191, 68, 250, 37, 65, 132, 22, 245, 0, 16, 29, 134, 127, 0, 39, 15, 59, 50, 73, 0, 193, 155, 56, 140, 64, 68, 250, 37, 65, 132, 22, 245, 0, 16, 29, 134, 127, 63, 45, 176, 59, 50, 73, 0, 193, 155, 56, 140, 64, 68, 250, 37, 65, 130, 12, 248, 0, 9, 11, 130, 127, 63, 45, 176, 59, 74, 36, 217, 192, 210, 111, 115, 64, 102, 136, 12, 193, 130, 12, 248, 0, 9, 11, 130, 127, 207, 55, 79, 59, 212, 43, 238, 192, 82, 97, 148, 191, 236, 105, 209, 192, 130, 12, 248, 0, 9, 11, 130, 127, 48, 54, 143, 58 ), PoolByteArray( 134, 172, 187, 64, 50, 33, 174, 190, 210, 53, 243, 191, 12, 130, 2, 0, 0, 254, 130, 127, 207, 52, 128, 47, 237, 42, 146, 192, 21, 140, 154, 191, 16, 88, 183, 64, 12, 130, 2, 0, 0, 254, 130, 127, 0, 39, 15, 59, 13, 195, 111, 192, 239, 225, 166, 191, 83, 174, 46, 192, 12, 130, 2, 0, 0, 254, 130, 127, 48, 54, 143, 58, 45, 33, 156, 64, 68, 106, 82, 191, 58, 175, 153, 192, 11, 131, 17, 0, 3, 240, 131, 127, 240, 54, 63, 50, 134, 172, 187, 64, 50, 33, 174, 190, 210, 53, 243, 191, 11, 131, 17, 0, 3, 240, 131, 127, 207, 52, 128, 47, 13, 195, 111, 192, 239, 225, 166, 191, 83, 174, 46, 192, 11, 131, 17, 0, 3, 240, 131, 127, 48, 54, 143, 58, 97, 253, 95, 192, 42, 169, 147, 63, 193, 173, 115, 192, 246, 126, 252, 0, 255, 252, 130, 129, 231, 59, 79, 59, 65, 101, 130, 192, 101, 170, 184, 63, 16, 88, 183, 64, 246, 126, 252, 0, 255, 252, 130, 129, 167, 56, 176, 59, 183, 40, 177, 64, 23, 130, 252, 63, 240, 109, 82, 191, 246, 126, 252, 0, 255, 252, 130, 129, 135, 58, 96, 52, 183, 40, 177, 64, 23, 130, 252, 63, 240, 109, 82, 191, 0, 122, 222, 0, 8, 222, 135, 129, 135, 58, 96, 52, 122, 252, 142, 64, 139, 79, 93, 63, 221, 7, 151, 192, 0, 122, 222, 0, 8, 222, 135, 129, 216, 59, 224, 53, 97, 253, 95, 192, 42, 169, 147, 63, 193, 173, 115, 192, 0, 122, 222, 0, 8, 222, 135, 129, 231, 59, 79, 59, 13, 195, 111, 192, 239, 225, 166, 191, 83, 174, 46, 192, 241, 207, 140, 0, 65, 97, 207, 127, 48, 54, 143, 58, 97, 253, 95, 192, 42, 169, 147, 63, 193, 173, 115, 192, 241, 207, 140, 0, 65, 97, 207, 127, 207, 55, 79, 59, 122, 252, 142, 64, 139, 79, 93, 63, 221, 7, 151, 192, 241, 207, 140, 0, 65, 97, 207, 127, 176, 55, 224, 53, 122, 252, 142, 64, 139, 79, 93, 63, 221, 7, 151, 192, 227, 255, 133, 0, 91, 84, 234, 127, 176, 55, 224, 53, 45, 33, 156, 64, 68, 106, 82, 191, 58, 175, 153, 192, 227, 255, 133, 0, 91, 84, 234, 127, 240, 54, 63, 50, 13, 195, 111, 192, 239, 225, 166, 191, 83, 174, 46, 192, 227, 255, 133, 0, 91, 84, 234, 127, 48, 54, 143, 58, 65, 101, 130, 192, 101, 170, 184, 63, 16, 88, 183, 64, 71, 243, 104, 0, 62, 106, 227, 129, 167, 56, 176, 59, 237, 42, 146, 192, 21, 140, 154, 191, 16, 88, 183, 64, 71, 243, 104, 0, 62, 106, 227, 129, 56, 56, 15, 59, 183, 40, 177, 64, 23, 130, 252, 63, 240, 109, 82, 191, 71, 243, 104, 0, 62, 106, 227, 129, 135, 58, 96, 52, 134, 172, 187, 64, 50, 33, 174, 190, 210, 53, 243, 191, 73, 222, 97, 0, 73, 101, 237, 129, 207, 52, 128, 47, 183, 40, 177, 64, 23, 130, 252, 63, 240, 109, 82, 191, 73, 222, 97, 0, 73, 101, 237, 129, 135, 58, 96, 52, 237, 42, 146, 192, 21, 140, 154, 191, 16, 88, 183, 64, 73, 222, 97, 0, 73, 101, 237, 129, 56, 56, 15, 59, 134, 172, 187, 64, 50, 33, 174, 190, 210, 53, 243, 191, 113, 36, 212, 0, 230, 203, 144, 129, 207, 52, 128, 47, 45, 33, 156, 64, 68, 106, 82, 191, 58, 175, 153, 192, 113, 36, 212, 0, 230, 203, 144, 129, 120, 59, 63, 50, 183, 40, 177, 64, 23, 130, 252, 63, 240, 109, 82, 191, 113, 36, 212, 0, 230, 203, 144, 129, 135, 58, 96, 52, 122, 252, 142, 64, 139, 79, 93, 63, 221, 7, 151, 192, 116, 30, 216, 0, 233, 199, 146, 129, 216, 59, 224, 53, 183, 40, 177, 64, 23, 130, 252, 63, 240, 109, 82, 191, 116, 30, 216, 0, 233, 199, 146, 129, 135, 58, 96, 52, 45, 33, 156, 64, 68, 106, 82, 191, 58, 175, 153, 192, 116, 30, 216, 0, 233, 199, 146, 129, 120, 59, 63, 50, 13, 195, 111, 192, 239, 225, 166, 191, 83, 174, 46, 192, 132, 23, 244, 0, 17, 29, 134, 127, 48, 54, 143, 58, 237, 42, 146, 192, 21, 140, 154, 191, 16, 88, 183, 64, 132, 23, 244, 0, 17, 29, 134, 127, 0, 39, 15, 59, 65, 101, 130, 192, 101, 170, 184, 63, 16, 88, 183, 64, 132, 23, 244, 0, 17, 29, 134, 127, 63, 45, 176, 59, 65, 101, 130, 192, 101, 170, 184, 63, 16, 88, 183, 64, 130, 9, 249, 0, 8, 11, 130, 127, 63, 45, 176, 59, 97, 253, 95, 192, 42, 169, 147, 63, 193, 173, 115, 192, 130, 9, 249, 0, 8, 11, 130, 127, 207, 55, 79, 59, 13, 195, 111, 192, 239, 225, 166, 191, 83, 174, 46, 192, 130, 9, 249, 0, 8, 11, 130, 127, 48, 54, 143, 58 ) ],
"format": 97559,
"index_count": 36,
"material": SubResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 36
}

[sub_resource type="Animation" id=4]
resource_name = "debrisAction"
length = 0.208333
tracks/0/type = "value"
tracks/0/path = NodePath(".:blend_shapes/base")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.0416667, 0.208333 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 1.0, 1.0, 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:blend_shapes/large1")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.0416667, 0.125, 0.166667, 0.208333 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 0.0, 1.0, 0.0, 0.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:blend_shapes/small1")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.0416667, 0.125, 0.166667, 0.208333 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 0.0, 0.0, 1.0, 1.0 ]
}

[sub_resource type="ConvexPolygonShape" id=5]
points = PoolVector3Array( -3.95784, 1.19532, -1.05097, -3.88906, 0.560667, -1.10983, -3.88236, 0.659598, -0.574258, -3.8479, 1.30589, -1.05119, -3.81326, 0.982276, -0.644435, -3.77646, 0.128448, -0.150239, -3.50716, 1.61495, -0.823851, -3.27536, -3.84176, -3.63606, -3.18, 0.302662, -4.33338, -3.0769, 0.314658, -4.57927, -3.07023, -1.7806, -4.6609, -2.97833, -4.67402, -4.85546, -2.95252, -6.1318, -4.73413, -2.87047, -6.36077, -4.65005, -2.75109, 0.437012, -4.4943, -2.74868, -6.19768, -4.81355, -2.51865, -6.68659, 3.32297, -2.49975, -6.54792, 4.29691, -2.42125, -6.78943, 3.38605, -2.30612, -6.08566, -4.36834, -2.19818, -6.7863, 4.4973, -2.09428, -6.6048, 4.86617, -2.08632, 1.33057, -4.06013, -2.08486, 2.85367, -0.721872, -2.07627, 2.6687, -0.572552, -1.86451, -6.67055, 4.7173, -1.86451, 2.84969, -1.16112, -1.75745, 2.83668, -0.47831, -1.75434, 1.86753, -3.70864, -1.75234, 3.06208, -0.856813, -1.64459, 2.07348, -3.47243, -1.53423, 1.85557, -3.69562, -1.53002, 2.23874, -3.29997, -1.42944, 2.02673, -3.53611, -1.33394, 1.19044, 0.698124, -0.599751, -5.91415, 5.44091, -0.422764, -5.21665, -2.83595, -0.305768, -5.11823, -2.73668, -0.0242757, -5.68427, 5.67165, 0.0908195, -5.56933, 5.67165, 0.153872, -5.92504, 5.65112, 0.257854, -5.79784, 5.63078 )

[node name="debris" type="RigidBody"]

[node name="debris" type="MeshInstance" parent="."]
mesh = SubResource( 3 )
blend_shapes/base = 0.0
blend_shapes/large1 = 0.0
blend_shapes/small1 = 0.0
material/0 = null

[node name="AnimationPlayer" type="AnimationPlayer" parent="debris"]
anims/debrisAction = SubResource( 4 )

[node name="CollisionShape" type="CollisionShape" parent="."]
shape = SubResource( 5 )
