[gd_scene load_steps=6 format=2]

[ext_resource path="res://props/pd_base_key/pd_base_key_0.001.png" type="Texture" id=1]


[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;
uniform sampler2D texture_1;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF.001'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node1_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node1_out0_color;
	float node1_out1_alpha;
	
	node1_in0_vector = vec3(UV, 0.0);
	node_tex_image(node1_in0_vector, texture_0, node1_out0_color, node1_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node2_in0_basecolor = node1_out0_color;
	float node2_in1_subsurface = float(0.0);
	vec3 node2_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node2_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node2_in4_metallic = float(0.0);
	float node2_in5_specular = float(0.5);
	float node2_in6_speculartint = float(0.0);
	float node2_in7_roughness = float(0.5);
	float node2_in8_anisotropic = float(0.0);
	float node2_in9_anisotropicrotation = float(0.0);
	float node2_in10_sheen = float(0.0);
	float node2_in11_sheentint = float(0.5);
	float node2_in12_clearcoat = float(0.0);
	float node2_in13_clearcoatroughness = float(0.029999999329447746);
	float node2_in14_ior = float(1.4500000476837158);
	float node2_in15_transmission = float(0.0);
	float node2_in16_transmissionroughness = float(0.0);
	vec4 node2_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node2_in18_alpha = float(1.0);
	vec3 node2_in19_normal = NORMAL;
	vec3 node2_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node2_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node2_bsdf_out0_albedo;
	float node2_bsdf_out1_sss_strength;
	float node2_bsdf_out3_specular;
	float node2_bsdf_out2_metallic;
	float node2_bsdf_out4_roughness;
	float node2_bsdf_out5_clearcoat;
	float node2_bsdf_out6_clearcoat_gloss;
	float node2_bsdf_out7_anisotropy;
	float node2_bsdf_out8_transmission;
	float node2_bsdf_out9_ior;
	
	node_bsdf_principled(node2_in0_basecolor, node2_in1_subsurface,
		node2_in3_subsurfacecolor, node2_in4_metallic, node2_in5_specular,
		node2_in7_roughness, node2_in12_clearcoat, node2_in13_clearcoatroughness,
		node2_in8_anisotropic, node2_in15_transmission, node2_in14_ior,
		node2_bsdf_out0_albedo, node2_bsdf_out1_sss_strength, node2_bsdf_out2_metallic,
		node2_bsdf_out3_specular, node2_bsdf_out4_roughness, node2_bsdf_out5_clearcoat,
		node2_bsdf_out6_clearcoat_gloss, node2_bsdf_out7_anisotropy,
		node2_bsdf_out8_transmission, node2_bsdf_out9_ior);
	
	
	// node: 'Principled BSDF.002'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node4_in0_basecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node4_in1_subsurface = float(0.0);
	vec3 node4_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node4_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node4_in4_metallic = float(0.0);
	float node4_in5_specular = float(0.5);
	float node4_in6_speculartint = float(0.0);
	float node4_in7_roughness = float(0.5);
	float node4_in8_anisotropic = float(0.0);
	float node4_in9_anisotropicrotation = float(0.0);
	float node4_in10_sheen = float(0.0);
	float node4_in11_sheentint = float(0.5);
	float node4_in12_clearcoat = float(0.0);
	float node4_in13_clearcoatroughness = float(0.029999999329447746);
	float node4_in14_ior = float(1.4500000476837158);
	float node4_in15_transmission = float(0.0);
	float node4_in16_transmissionroughness = float(0.0);
	vec4 node4_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node4_in18_alpha = float(1.0);
	vec3 node4_in19_normal = NORMAL;
	vec3 node4_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node4_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node4_bsdf_out0_albedo;
	float node4_bsdf_out1_sss_strength;
	float node4_bsdf_out3_specular;
	float node4_bsdf_out2_metallic;
	float node4_bsdf_out4_roughness;
	float node4_bsdf_out5_clearcoat;
	float node4_bsdf_out6_clearcoat_gloss;
	float node4_bsdf_out7_anisotropy;
	float node4_bsdf_out8_transmission;
	float node4_bsdf_out9_ior;
	
	node_bsdf_principled(node4_in0_basecolor, node4_in1_subsurface,
		node4_in3_subsurfacecolor, node4_in4_metallic, node4_in5_specular,
		node4_in7_roughness, node4_in12_clearcoat, node4_in13_clearcoatroughness,
		node4_in8_anisotropic, node4_in15_transmission, node4_in14_ior,
		node4_bsdf_out0_albedo, node4_bsdf_out1_sss_strength, node4_bsdf_out2_metallic,
		node4_bsdf_out3_specular, node4_bsdf_out4_roughness, node4_bsdf_out5_clearcoat,
		node4_bsdf_out6_clearcoat_gloss, node4_bsdf_out7_anisotropy,
		node4_bsdf_out8_transmission, node4_bsdf_out9_ior);
	
	
	// node: 'Image Texture.001'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node5_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node5_out0_color;
	float node5_out1_alpha;
	
	node5_in0_vector = vec3(UV, 0.0);
	node_tex_image(node5_in0_vector, texture_1, node5_out0_color, node5_out1_alpha);
	
	
	ALBEDO = node2_bsdf_out0_albedo;
	SSS_STRENGTH = node2_bsdf_out1_sss_strength;
	SPECULAR = node2_bsdf_out3_specular;
	METALLIC = node2_bsdf_out2_metallic;
	ROUGHNESS = node2_bsdf_out4_roughness;
	CLEARCOAT = node2_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node2_bsdf_out6_clearcoat_gloss;
	NORMAL = node2_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node2_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node2_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node2_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/texture_0 = ExtResource( 1 )

[sub_resource type="ArrayMesh" id=3]
resource_name = "pd_base_key001"
surfaces/0 = {
"aabb": AABB( -1.08754, 0, -4.1706, 2.08794, 23.7233, 10.4075 ),
"array_data": PoolByteArray( 200, 12, 128, 63, 205, 229, 14, 63, 217, 148, 199, 64, 0, 134, 34, 0, 216, 224, 141, 129, 128, 56, 195, 58, 187, 15, 136, 191, 0, 0, 0, 0, 59, 228, 136, 64, 0, 134, 34, 0, 216, 224, 141, 129, 128, 57, 135, 58, 200, 12, 128, 63, 0, 0, 0, 0, 59, 228, 136, 64, 0, 134, 34, 0, 216, 224, 141, 129, 241, 56, 225, 58, 187, 15, 136, 191, 100, 59, 101, 65, 59, 228, 136, 64, 0, 0, 127, 0, 157, 178, 0, 129, 128, 57, 60, 54, 200, 12, 128, 63, 100, 59, 101, 65, 59, 228, 136, 64, 0, 0, 127, 0, 155, 180, 0, 129, 241, 56, 240, 54, 200, 12, 128, 63, 82, 201, 189, 65, 59, 228, 136, 64, 0, 0, 127, 0, 163, 170, 0, 129, 241, 56, 105, 49, 187, 15, 136, 191, 0, 0, 0, 0, 59, 228, 136, 64, 130, 0, 0, 0, 0, 0, 130, 129, 128, 57, 135, 58, 187, 15, 136, 191, 100, 59, 101, 65, 59, 228, 136, 64, 130, 0, 0, 0, 0, 0, 130, 129, 128, 57, 60, 54, 131, 52, 139, 191, 100, 59, 101, 65, 142, 117, 133, 192, 130, 0, 0, 0, 0, 0, 130, 129, 99, 59, 60, 54, 131, 52, 139, 191, 0, 0, 0, 0, 142, 117, 133, 192, 0, 0, 129, 0, 155, 180, 0, 127, 199, 54, 135, 58, 131, 52, 139, 191, 100, 59, 101, 65, 142, 117, 133, 192, 0, 0, 129, 0, 164, 169, 0, 127, 199, 54, 60, 54, 200, 12, 128, 63, 100, 59, 101, 65, 142, 117, 133, 192, 0, 0, 129, 0, 163, 170, 0, 127, 170, 53, 45, 55, 200, 12, 128, 63, 0, 0, 0, 0, 59, 228, 136, 64, 127, 0, 0, 0, 0, 2, 130, 127, 142, 47, 225, 58, 200, 12, 128, 63, 0, 0, 0, 0, 142, 117, 133, 192, 127, 0, 0, 0, 0, 0, 129, 127, 170, 53, 225, 58, 200, 12, 128, 63, 100, 59, 101, 65, 142, 117, 133, 192, 127, 0, 0, 0, 0, 6, 130, 127, 170, 53, 45, 55, 200, 12, 128, 63, 0, 0, 0, 0, 142, 117, 133, 192, 0, 129, 0, 0, 0, 0, 130, 129, 213, 58, 225, 58, 200, 12, 128, 63, 0, 0, 0, 0, 59, 228, 136, 64, 0, 129, 0, 0, 0, 0, 129, 129, 241, 56, 225, 58, 187, 15, 136, 191, 0, 0, 0, 0, 59, 228, 136, 64, 0, 129, 0, 0, 0, 0, 129, 129, 128, 57, 135, 58, 131, 52, 139, 191, 100, 59, 101, 65, 142, 117, 133, 192, 0, 0, 129, 0, 164, 169, 0, 127, 199, 54, 60, 54, 131, 52, 139, 191, 82, 201, 189, 65, 142, 117, 133, 192, 0, 0, 129, 0, 164, 169, 0, 127, 199, 54, 15, 47, 200, 12, 128, 63, 82, 201, 189, 65, 142, 117, 133, 192, 0, 0, 129, 0, 164, 169, 0, 127, 170, 53, 105, 49, 131, 52, 139, 191, 0, 0, 0, 0, 142, 117, 133, 192, 0, 129, 0, 0, 0, 0, 130, 129, 99, 59, 135, 58, 131, 52, 139, 191, 0, 0, 0, 0, 142, 117, 133, 192, 130, 0, 0, 0, 0, 0, 130, 129, 99, 59, 135, 58, 200, 12, 128, 63, 100, 59, 101, 65, 59, 228, 136, 64, 127, 0, 0, 0, 0, 5, 130, 127, 142, 47, 240, 54, 200, 12, 128, 63, 82, 201, 189, 65, 142, 117, 133, 192, 127, 0, 0, 0, 0, 3, 130, 127, 170, 53, 105, 49, 187, 15, 136, 191, 82, 201, 189, 65, 59, 228, 136, 64, 0, 127, 0, 0, 0, 0, 129, 127, 0, 50, 15, 47, 200, 12, 128, 63, 82, 201, 189, 65, 59, 228, 136, 64, 0, 127, 0, 0, 0, 0, 129, 127, 142, 47, 105, 49, 200, 12, 128, 63, 82, 201, 189, 65, 142, 117, 133, 192, 0, 127, 0, 0, 0, 0, 129, 127, 170, 53, 105, 49, 187, 15, 136, 191, 100, 59, 101, 65, 59, 228, 136, 64, 130, 0, 0, 0, 0, 0, 130, 129, 128, 57, 60, 54, 187, 15, 136, 191, 82, 201, 189, 65, 59, 228, 136, 64, 130, 0, 0, 0, 0, 0, 130, 129, 128, 57, 15, 47, 131, 52, 139, 191, 82, 201, 189, 65, 142, 117, 133, 192, 130, 0, 0, 0, 0, 0, 130, 129, 99, 59, 15, 47, 187, 15, 136, 191, 205, 229, 14, 63, 217, 148, 199, 64, 0, 0, 127, 0, 160, 173, 0, 129, 14, 57, 75, 58, 200, 12, 128, 63, 205, 229, 14, 63, 217, 148, 199, 64, 0, 0, 127, 0, 167, 167, 0, 129, 128, 56, 195, 58, 200, 12, 128, 63, 208, 213, 87, 65, 217, 148, 199, 64, 0, 0, 127, 0, 130, 247, 0, 129, 128, 56, 165, 55, 187, 15, 136, 191, 0, 0, 0, 0, 59, 228, 136, 64, 129, 0, 0, 0, 0, 41, 136, 129, 128, 57, 135, 58, 187, 15, 136, 191, 205, 229, 14, 63, 217, 148, 199, 64, 129, 0, 0, 0, 0, 41, 136, 129, 14, 57, 75, 58, 187, 15, 136, 191, 208, 213, 87, 65, 217, 148, 199, 64, 129, 0, 0, 0, 0, 41, 136, 129, 14, 57, 165, 55, 200, 12, 128, 63, 208, 213, 87, 65, 217, 148, 199, 64, 0, 116, 49, 0, 129, 0, 0, 129, 128, 56, 165, 55, 200, 12, 128, 63, 100, 59, 101, 65, 59, 228, 136, 64, 0, 116, 49, 0, 133, 244, 28, 129, 241, 56, 240, 54, 187, 15, 136, 191, 208, 213, 87, 65, 217, 148, 199, 64, 0, 116, 49, 0, 133, 245, 27, 129, 14, 57, 165, 55, 200, 12, 128, 63, 0, 0, 0, 0, 59, 228, 136, 64, 127, 0, 0, 0, 0, 250, 130, 127, 142, 47, 225, 58, 200, 12, 128, 63, 100, 59, 101, 65, 59, 228, 136, 64, 127, 0, 0, 0, 0, 217, 136, 127, 142, 47, 240, 54, 200, 12, 128, 63, 208, 213, 87, 65, 217, 148, 199, 64, 127, 0, 0, 0, 0, 219, 135, 127, 0, 44, 165, 55, 200, 12, 128, 63, 205, 229, 14, 63, 217, 148, 199, 64, 0, 134, 34, 0, 199, 225, 148, 129, 128, 56, 195, 58, 187, 15, 136, 191, 205, 229, 14, 63, 217, 148, 199, 64, 0, 134, 34, 0, 199, 225, 148, 129, 14, 57, 75, 58, 187, 15, 136, 191, 0, 0, 0, 0, 59, 228, 136, 64, 0, 134, 34, 0, 199, 225, 148, 129, 128, 57, 135, 58, 187, 15, 136, 191, 82, 201, 189, 65, 59, 228, 136, 64, 0, 0, 127, 0, 165, 169, 0, 129, 128, 57, 15, 47, 200, 12, 128, 63, 0, 0, 0, 0, 142, 117, 133, 192, 0, 0, 129, 0, 154, 181, 0, 127, 170, 53, 225, 58, 200, 12, 128, 63, 100, 59, 101, 65, 142, 117, 133, 192, 0, 0, 129, 0, 164, 169, 0, 127, 170, 53, 45, 55, 200, 12, 128, 63, 82, 201, 189, 65, 59, 228, 136, 64, 127, 0, 0, 0, 0, 0, 129, 127, 142, 47, 105, 49, 200, 12, 128, 63, 82, 201, 189, 65, 142, 117, 133, 192, 0, 127, 0, 0, 0, 0, 130, 127, 170, 53, 105, 49, 131, 52, 139, 191, 82, 201, 189, 65, 142, 117, 133, 192, 0, 127, 0, 0, 0, 0, 130, 127, 199, 54, 15, 47, 187, 15, 136, 191, 82, 201, 189, 65, 59, 228, 136, 64, 0, 127, 0, 0, 0, 0, 130, 127, 0, 50, 15, 47, 131, 52, 139, 191, 82, 201, 189, 65, 142, 117, 133, 192, 130, 0, 0, 0, 0, 0, 130, 129, 99, 59, 15, 47, 131, 52, 139, 191, 100, 59, 101, 65, 142, 117, 133, 192, 130, 0, 0, 0, 0, 0, 130, 129, 99, 59, 60, 54, 187, 15, 136, 191, 100, 59, 101, 65, 59, 228, 136, 64, 130, 0, 0, 0, 0, 0, 130, 129, 128, 57, 60, 54, 187, 15, 136, 191, 208, 213, 87, 65, 217, 148, 199, 64, 0, 0, 127, 0, 129, 0, 0, 129, 14, 57, 165, 55, 187, 15, 136, 191, 208, 213, 87, 65, 217, 148, 199, 64, 129, 0, 0, 0, 0, 163, 170, 129, 14, 57, 165, 55, 187, 15, 136, 191, 100, 59, 101, 65, 59, 228, 136, 64, 129, 0, 0, 0, 0, 163, 170, 129, 128, 57, 60, 54, 187, 15, 136, 191, 0, 0, 0, 0, 59, 228, 136, 64, 129, 0, 0, 0, 0, 163, 170, 129, 128, 57, 135, 58, 187, 15, 136, 191, 100, 59, 101, 65, 59, 228, 136, 64, 0, 116, 49, 0, 144, 234, 53, 129, 128, 57, 60, 54, 200, 12, 128, 63, 205, 229, 14, 63, 217, 148, 199, 64, 127, 0, 0, 0, 0, 254, 130, 127, 0, 44, 195, 58 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 15, 0, 17, 0, 16, 0, 18, 0, 20, 0, 19, 0, 17, 0, 15, 0, 21, 0, 8, 0, 6, 0, 22, 0, 23, 0, 24, 0, 14, 0, 14, 0, 12, 0, 23, 0, 25, 0, 27, 0, 26, 0, 28, 0, 30, 0, 29, 0, 31, 0, 33, 0, 32, 0, 34, 0, 36, 0, 35, 0, 37, 0, 39, 0, 38, 0, 40, 0, 42, 0, 41, 0, 43, 0, 45, 0, 44, 0, 5, 0, 3, 0, 46, 0, 11, 0, 9, 0, 47, 0, 20, 0, 18, 0, 48, 0, 24, 0, 23, 0, 49, 0, 50, 0, 52, 0, 51, 0, 53, 0, 55, 0, 54, 0, 33, 0, 31, 0, 56, 0, 57, 0, 59, 0, 58, 0, 60, 0, 38, 0, 39, 0, 42, 0, 40, 0, 61, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 84,
"material": SubResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 62
}

[sub_resource type="ConvexPolygonShape" id=4]
points = PoolVector3Array( -1.17995, -0.0926685, 4.63112, -1.17995, 0.0945568, 5.37249, -1.17995, 0.279442, 5.92878, -1.17995, 0.464326, 6.29998, -1.08648, 0.912365, -3.81828, -1.08648, 22.8109, -3.81828, -1.06355, 22.5644, 4.08718, -1.063, 13.4364, 5.7444, 0.84215, 20.1458, -4.1706, 0.84215, 23.6062, -4.1706, 0.988817, 23.2262, 4.2779, 0.999717, 13.552, 6.09117, 1.0004, 0.372601, -4.05671, 1.0004, 0.372601, 4.49051, 1.0004, 0.552539, 5.20302, 1.0004, 0.730228, 5.73766, 1.0004, 0.907916, 6.09441, 1.0004, 23.3507, -4.05771 )

[node name="pd_base_key" type="RigidBody"]

[node name="pd_base_key" type="MeshInstance" parent="."]
transform = Transform( 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 0 )
mesh = SubResource( 3 )
material/0 = null

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 0 )
shape = SubResource( 4 )
