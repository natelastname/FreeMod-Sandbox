[gd_scene load_steps=1 format=2]

[ext_resource id=1 path="pd_base_key_0.001.png" type="Texture"]

[sub_resource id=1 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;
uniform sampler2D texture_1;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF.001'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node1_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node1_out0_color;
	float node1_out1_alpha;
	
	node1_in0_vector = vec3(UV, 0.0);
	node_tex_image(node1_in0_vector, texture_0, node1_out0_color, node1_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node2_in0_basecolor = node1_out0_color;
	float node2_in1_subsurface = float(0.0);
	vec3 node2_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node2_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node2_in4_metallic = float(0.0);
	float node2_in5_specular = float(0.5);
	float node2_in6_speculartint = float(0.0);
	float node2_in7_roughness = float(0.5);
	float node2_in8_anisotropic = float(0.0);
	float node2_in9_anisotropicrotation = float(0.0);
	float node2_in10_sheen = float(0.0);
	float node2_in11_sheentint = float(0.5);
	float node2_in12_clearcoat = float(0.0);
	float node2_in13_clearcoatroughness = float(0.029999999329447746);
	float node2_in14_ior = float(1.4500000476837158);
	float node2_in15_transmission = float(0.0);
	float node2_in16_transmissionroughness = float(0.0);
	vec4 node2_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node2_in18_alpha = float(1.0);
	vec3 node2_in19_normal = NORMAL;
	vec3 node2_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node2_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node2_bsdf_out0_albedo;
	float node2_bsdf_out1_sss_strength;
	float node2_bsdf_out3_specular;
	float node2_bsdf_out2_metallic;
	float node2_bsdf_out4_roughness;
	float node2_bsdf_out5_clearcoat;
	float node2_bsdf_out6_clearcoat_gloss;
	float node2_bsdf_out7_anisotropy;
	float node2_bsdf_out8_transmission;
	float node2_bsdf_out9_ior;
	
	node_bsdf_principled(node2_in0_basecolor, node2_in1_subsurface,
		node2_in3_subsurfacecolor, node2_in4_metallic, node2_in5_specular,
		node2_in7_roughness, node2_in12_clearcoat, node2_in13_clearcoatroughness,
		node2_in8_anisotropic, node2_in15_transmission, node2_in14_ior,
		node2_bsdf_out0_albedo, node2_bsdf_out1_sss_strength, node2_bsdf_out2_metallic,
		node2_bsdf_out3_specular, node2_bsdf_out4_roughness, node2_bsdf_out5_clearcoat,
		node2_bsdf_out6_clearcoat_gloss, node2_bsdf_out7_anisotropy,
		node2_bsdf_out8_transmission, node2_bsdf_out9_ior);
	
	
	// node: 'Principled BSDF.002'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node4_in0_basecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node4_in1_subsurface = float(0.0);
	vec3 node4_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node4_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node4_in4_metallic = float(0.0);
	float node4_in5_specular = float(0.5);
	float node4_in6_speculartint = float(0.0);
	float node4_in7_roughness = float(0.5);
	float node4_in8_anisotropic = float(0.0);
	float node4_in9_anisotropicrotation = float(0.0);
	float node4_in10_sheen = float(0.0);
	float node4_in11_sheentint = float(0.5);
	float node4_in12_clearcoat = float(0.0);
	float node4_in13_clearcoatroughness = float(0.029999999329447746);
	float node4_in14_ior = float(1.4500000476837158);
	float node4_in15_transmission = float(0.0);
	float node4_in16_transmissionroughness = float(0.0);
	vec4 node4_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node4_in18_alpha = float(1.0);
	vec3 node4_in19_normal = NORMAL;
	vec3 node4_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node4_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node4_bsdf_out0_albedo;
	float node4_bsdf_out1_sss_strength;
	float node4_bsdf_out3_specular;
	float node4_bsdf_out2_metallic;
	float node4_bsdf_out4_roughness;
	float node4_bsdf_out5_clearcoat;
	float node4_bsdf_out6_clearcoat_gloss;
	float node4_bsdf_out7_anisotropy;
	float node4_bsdf_out8_transmission;
	float node4_bsdf_out9_ior;
	
	node_bsdf_principled(node4_in0_basecolor, node4_in1_subsurface,
		node4_in3_subsurfacecolor, node4_in4_metallic, node4_in5_specular,
		node4_in7_roughness, node4_in12_clearcoat, node4_in13_clearcoatroughness,
		node4_in8_anisotropic, node4_in15_transmission, node4_in14_ior,
		node4_bsdf_out0_albedo, node4_bsdf_out1_sss_strength, node4_bsdf_out2_metallic,
		node4_bsdf_out3_specular, node4_bsdf_out4_roughness, node4_bsdf_out5_clearcoat,
		node4_bsdf_out6_clearcoat_gloss, node4_bsdf_out7_anisotropy,
		node4_bsdf_out8_transmission, node4_bsdf_out9_ior);
	
	
	// node: 'Image Texture.001'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node5_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node5_out0_color;
	float node5_out1_alpha;
	
	node5_in0_vector = vec3(UV, 0.0);
	node_tex_image(node5_in0_vector, texture_1, node5_out0_color, node5_out1_alpha);
	
	
	ALBEDO = node2_bsdf_out0_albedo;
	SSS_STRENGTH = node2_bsdf_out1_sss_strength;
	SPECULAR = node2_bsdf_out3_specular;
	METALLIC = node2_bsdf_out2_metallic;
	ROUGHNESS = node2_bsdf_out4_roughness;
	CLEARCOAT = node2_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node2_bsdf_out6_clearcoat_gloss;
	NORMAL = node2_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node2_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node2_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node2_bsdf_out7_anisotropy;
}
"

[sub_resource id=2 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(1)
shader_param/texture_0 = ExtResource(1)

[sub_resource id=3 type="ArrayMesh"]

resource_name = "pd_base_key001"
surfaces/0 = {
	"material":SubResource(2),
	"primitive":4,
	"arrays":[
		Vector3Array(1.00039, 0.558194, 6.23692, -1.06298, 0.0, 4.27786, 1.00039, 0.0, 4.27786, -1.06298, 14.327, 4.27786, 1.00039, 14.327, 4.27786, 1.00039, 23.7233, 4.27786, -1.06298, 0.0, 4.27786, -1.06298, 14.327, 4.27786, -1.08754, 14.327, -4.1706, -1.08754, 0.0, -4.1706, -1.08754, 14.327, -4.1706, 1.00039, 14.327, -4.1706, 1.00039, 0.0, 4.27786, 1.00039, 0.0, -4.1706, 1.00039, 14.327, -4.1706, 1.00039, 0.0, -4.1706, 1.00039, 0.0, 4.27786, -1.06298, 0.0, 4.27786, -1.08754, 14.327, -4.1706, -1.08754, 23.7233, -4.1706, 1.00039, 23.7233, -4.1706, -1.08754, 0.0, -4.1706, -1.08754, 0.0, -4.1706, 1.00039, 14.327, 4.27786, 1.00039, 23.7233, -4.1706, -1.06298, 23.7233, 4.27786, 1.00039, 23.7233, 4.27786, 1.00039, 23.7233, -4.1706, -1.06298, 14.327, 4.27786, -1.06298, 23.7233, 4.27786, -1.08754, 23.7233, -4.1706, -1.06298, 0.558194, 6.23692, 1.00039, 0.558194, 6.23692, 1.00039, 13.4897, 6.23692, -1.06298, 0.0, 4.27786, -1.06298, 0.558194, 6.23692, -1.06298, 13.4897, 6.23692, 1.00039, 13.4897, 6.23692, 1.00039, 14.327, 4.27786, -1.06298, 13.4897, 6.23692, 1.00039, 0.0, 4.27786, 1.00039, 14.327, 4.27786, 1.00039, 13.4897, 6.23692, 1.00039, 0.558194, 6.23692, -1.06298, 0.558194, 6.23692, -1.06298, 0.0, 4.27786, -1.06298, 23.7233, 4.27786, 1.00039, 0.0, -4.1706, 1.00039, 14.327, -4.1706, 1.00039, 23.7233, 4.27786, 1.00039, 23.7233, -4.1706, -1.08754, 23.7233, -4.1706, -1.06298, 23.7233, 4.27786, -1.08754, 23.7233, -4.1706, -1.08754, 14.327, -4.1706, -1.06298, 14.327, 4.27786, -1.06298, 13.4897, 6.23692, -1.06298, 13.4897, 6.23692, -1.06298, 14.327, 4.27786, -1.06298, 0.0, 4.27786, -1.06298, 14.327, 4.27786, 1.00039, 0.558194, 6.23692),
		Vector3Array(0.0, -0.961723, 0.274023, 0.0, -0.961723, 0.274023, 0.0, -0.961723, 0.274023, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -0.999996, 0.0, 0.00290749, -0.999996, 0.0, 0.00290749, -0.999996, 0.0, 0.00290749, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, -0.999996, 0.0, 0.00290749, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -0.999996, 0.0, 0.00290749, -0.999996, 0.0, 0.00290749, -0.999996, 0.0, 0.00290749, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.919537, 0.393005, 0.0, 0.919537, 0.393005, 0.0, 0.919537, 0.393005, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.961723, 0.274023, 0.0, -0.961723, 0.274023, 0.0, -0.961723, 0.274023, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -0.999996, 0.0, 0.00290749, -0.999996, 0.0, 0.00290749, -0.999996, 0.0, 0.00290749, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.919537, 0.393005, 1.0, 0.0, 0.0),
		FloatArray(-0.319899, -0.259624, -0.911186, -1.0, -0.319899, -0.259624, -0.911186, -1.0, -0.319899, -0.259624, -0.911186, -1.0, -0.786893, -0.61709, 0.0, -1.0, -0.796555, -0.604566, 0.0, -1.0, -0.732709, -0.680542, 0.0, -1.0, -0.00290749, 0.0, -0.999996, -1.0, -0.00290749, 0.0, -0.999996, -1.0, -0.00290749, 0.0, -0.999996, -1.0, -0.798886, -0.601482, 0.0, 1.0, -0.726283, -0.687396, 0.0, 1.0, -0.734069, -0.679075, 0.0, 1.0, 0.0, 0.0198085, -0.999804, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0485176, -0.998822, 1.0, -0.00246411, 0.0, -0.999997, -1.0, 0.0, 0.0, -1.0, -1.0, -0.000447933, 0.0, -1.0, -1.0, -0.725931, -0.687768, 0.0, 1.0, -0.725931, -0.687768, 0.0, 1.0, -0.725931, -0.687768, 0.0, 1.0, -0.00290749, 0.0, -0.999996, -1.0, -0.00290749, 0.0, -0.999996, -1.0, 0.0, 0.0447981, -0.998996, 1.0, 0.0, 0.0272556, -0.999628, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -0.00290749, 0.0, -0.999996, -1.0, -0.00290749, 0.0, -0.999996, -1.0, -0.00290749, 0.0, -0.999996, -1.0, -0.756139, -0.654411, 0.0, -1.0, -0.706135, -0.708077, 0.0, -1.0, -0.99731, -0.073303, 0.0, -1.0, 0.0, 0.325058, -0.945694, -1.0, 0.0, 0.325058, -0.945694, -1.0, 0.0, 0.325058, -0.945694, -1.0, -1.0, 0.0, 0.0, -1.0, -0.970563, -0.0946536, 0.221467, -1.0, -0.9729, -0.0908731, 0.212621, -1.0, 0.0, -0.0536596, -0.998559, 1.0, 0.0, -0.312643, -0.949871, 1.0, 0.0, -0.292203, -0.956356, 1.0, -0.45182, -0.244459, -0.857962, -1.0, -0.45182, -0.244459, -0.857962, -1.0, -0.45182, -0.244459, -0.857962, -1.0, -0.721853, -0.692046, 0.0, -1.0, -0.805689, -0.592339, 0.0, 1.0, -0.725931, -0.687768, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, -0.00290748, 0.0, -0.999996, 1.0, -0.00290748, 0.0, -0.999996, 1.0, -0.00290748, 0.0, -0.999996, 1.0, -0.00290749, 0.0, -0.999996, -1.0, -0.00290749, 0.0, -0.999996, -1.0, -0.00290749, 0.0, -0.999996, -1.0, -1.0, 0.0, 0.0, -1.0, 0.0, -0.735534, -0.677488, -1.0, 0.0, -0.735534, -0.677488, -1.0, 0.0, -0.735534, -0.677488, -1.0, -0.888571, -0.180286, 0.421827, -1.0, 0.0, -0.0208904, -0.999782, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(0.5625, 0.845588, 0.6875, 0.816176, 0.618056, 0.860294, 0.6875, 0.389706, 0.618056, 0.433824, 0.618056, 0.169118, 0.6875, 0.816176, 0.6875, 0.389706, 0.923611, 0.389706, 0.423611, 0.816176, 0.423611, 0.389706, 0.354167, 0.448529, 0.118056, 0.860294, 0.354167, 0.860294, 0.354167, 0.448529, 0.854167, 0.860294, 0.618056, 0.860294, 0.6875, 0.816176, 0.423611, 0.389706, 0.423611, 0.110294, 0.354167, 0.169118, 0.923611, 0.816176, 0.923611, 0.816176, 0.118056, 0.433824, 0.354167, 0.169118, 0.1875, 0.110294, 0.118056, 0.169118, 0.354167, 0.169118, 0.6875, 0.389706, 0.6875, 0.110294, 0.923611, 0.110294, 0.631944, 0.786765, 0.5625, 0.845588, 0.5625, 0.477941, 0.6875, 0.816176, 0.631944, 0.786765, 0.631944, 0.477941, 0.5625, 0.477941, 0.618056, 0.433824, 0.631944, 0.477941, 0.118056, 0.860294, 0.118056, 0.433824, 0.0625, 0.477941, 0.5625, 0.845588, 0.631944, 0.786765, 0.6875, 0.816176, 0.6875, 0.110294, 0.354167, 0.860294, 0.354167, 0.448529, 0.118056, 0.169118, 0.354167, 0.169118, 0.423611, 0.110294, 0.1875, 0.110294, 0.923611, 0.110294, 0.923611, 0.389706, 0.6875, 0.389706, 0.631944, 0.477941, 0.631944, 0.477941, 0.6875, 0.389706, 0.6875, 0.816176, 0.6875, 0.389706, 0.0625, 0.845588),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 6, 8, 7, 9, 11, 10, 12, 14, 13, 15, 17, 16, 18, 20, 19, 17, 15, 21, 8, 6, 22, 23, 24, 14, 14, 12, 23, 25, 27, 26, 28, 30, 29, 31, 33, 32, 34, 36, 35, 37, 39, 38, 40, 42, 41, 43, 45, 44, 5, 3, 46, 11, 9, 47, 20, 18, 48, 24, 23, 49, 50, 52, 51, 53, 55, 54, 33, 31, 56, 57, 59, 58, 60, 38, 39, 42, 40, 61)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="pd_base_key" type="MeshInstance" parent="."]

mesh = SubResource(3)
visible = true
transform = Transform(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)
