[gd_scene load_steps=6 format=2]

[ext_resource path="res://good_props/spark/spark_0.001.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;
uniform sampler2D texture_1;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF.001'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node1_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node1_out0_color;
	float node1_out1_alpha;
	
	node1_in0_vector = vec3(UV, 0.0);
	node_tex_image(node1_in0_vector, texture_0, node1_out0_color, node1_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node2_in0_basecolor = node1_out0_color;
	float node2_in1_subsurface = float(0.0);
	vec3 node2_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node2_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node2_in4_metallic = float(0.0);
	float node2_in5_specular = float(0.5);
	float node2_in6_speculartint = float(0.0);
	float node2_in7_roughness = float(0.5);
	float node2_in8_anisotropic = float(0.0);
	float node2_in9_anisotropicrotation = float(0.0);
	float node2_in10_sheen = float(0.0);
	float node2_in11_sheentint = float(0.5);
	float node2_in12_clearcoat = float(0.0);
	float node2_in13_clearcoatroughness = float(0.029999999329447746);
	float node2_in14_ior = float(1.4500000476837158);
	float node2_in15_transmission = float(0.0);
	float node2_in16_transmissionroughness = float(0.0);
	vec4 node2_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node2_in18_alpha = float(1.0);
	vec3 node2_in19_normal = NORMAL;
	vec3 node2_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node2_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node2_bsdf_out0_albedo;
	float node2_bsdf_out1_sss_strength;
	float node2_bsdf_out3_specular;
	float node2_bsdf_out2_metallic;
	float node2_bsdf_out4_roughness;
	float node2_bsdf_out5_clearcoat;
	float node2_bsdf_out6_clearcoat_gloss;
	float node2_bsdf_out7_anisotropy;
	float node2_bsdf_out8_transmission;
	float node2_bsdf_out9_ior;
	
	node_bsdf_principled(node2_in0_basecolor, node2_in1_subsurface,
		node2_in3_subsurfacecolor, node2_in4_metallic, node2_in5_specular,
		node2_in7_roughness, node2_in12_clearcoat, node2_in13_clearcoatroughness,
		node2_in8_anisotropic, node2_in15_transmission, node2_in14_ior,
		node2_bsdf_out0_albedo, node2_bsdf_out1_sss_strength, node2_bsdf_out2_metallic,
		node2_bsdf_out3_specular, node2_bsdf_out4_roughness, node2_bsdf_out5_clearcoat,
		node2_bsdf_out6_clearcoat_gloss, node2_bsdf_out7_anisotropy,
		node2_bsdf_out8_transmission, node2_bsdf_out9_ior);
	
	
	// node: 'Principled BSDF.002'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node4_in0_basecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node4_in1_subsurface = float(0.0);
	vec3 node4_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node4_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node4_in4_metallic = float(0.0);
	float node4_in5_specular = float(0.5);
	float node4_in6_speculartint = float(0.0);
	float node4_in7_roughness = float(0.5);
	float node4_in8_anisotropic = float(0.0);
	float node4_in9_anisotropicrotation = float(0.0);
	float node4_in10_sheen = float(0.0);
	float node4_in11_sheentint = float(0.5);
	float node4_in12_clearcoat = float(0.0);
	float node4_in13_clearcoatroughness = float(0.029999999329447746);
	float node4_in14_ior = float(1.4500000476837158);
	float node4_in15_transmission = float(0.0);
	float node4_in16_transmissionroughness = float(0.0);
	vec4 node4_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node4_in18_alpha = float(1.0);
	vec3 node4_in19_normal = NORMAL;
	vec3 node4_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node4_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node4_bsdf_out0_albedo;
	float node4_bsdf_out1_sss_strength;
	float node4_bsdf_out3_specular;
	float node4_bsdf_out2_metallic;
	float node4_bsdf_out4_roughness;
	float node4_bsdf_out5_clearcoat;
	float node4_bsdf_out6_clearcoat_gloss;
	float node4_bsdf_out7_anisotropy;
	float node4_bsdf_out8_transmission;
	float node4_bsdf_out9_ior;
	
	node_bsdf_principled(node4_in0_basecolor, node4_in1_subsurface,
		node4_in3_subsurfacecolor, node4_in4_metallic, node4_in5_specular,
		node4_in7_roughness, node4_in12_clearcoat, node4_in13_clearcoatroughness,
		node4_in8_anisotropic, node4_in15_transmission, node4_in14_ior,
		node4_bsdf_out0_albedo, node4_bsdf_out1_sss_strength, node4_bsdf_out2_metallic,
		node4_bsdf_out3_specular, node4_bsdf_out4_roughness, node4_bsdf_out5_clearcoat,
		node4_bsdf_out6_clearcoat_gloss, node4_bsdf_out7_anisotropy,
		node4_bsdf_out8_transmission, node4_bsdf_out9_ior);
	
	
	// node: 'Image Texture.001'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node5_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node5_out0_color;
	float node5_out1_alpha;
	
	node5_in0_vector = vec3(UV, 0.0);
	node_tex_image(node5_in0_vector, texture_1, node5_out0_color, node5_out1_alpha);
	
	
	ALBEDO = node2_bsdf_out0_albedo;
	SSS_STRENGTH = node2_bsdf_out1_sss_strength;
	SPECULAR = node2_bsdf_out3_specular;
	METALLIC = node2_bsdf_out2_metallic;
	ROUGHNESS = node2_bsdf_out4_roughness;
	CLEARCOAT = node2_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node2_bsdf_out6_clearcoat_gloss;
	NORMAL = node2_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node2_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node2_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node2_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/texture_0 = ExtResource( 1 )

[sub_resource type="ArrayMesh" id=3]
resource_name = "spark001"
surfaces/0 = {
"aabb": AABB( -0.752572, -0.750847, -0.750002, 1.50001, 1.50001, 1.50001 ),
"array_data": PoolByteArray( 136, 123, 180, 187, 130, 55, 64, 191, 4, 148, 64, 187, 73, 183, 73, 0, 89, 0, 167, 127, 128, 50, 64, 55, 42, 88, 63, 63, 248, 106, 9, 59, 4, 148, 64, 187, 73, 183, 73, 0, 89, 0, 167, 127, 128, 50, 64, 53, 136, 123, 180, 187, 248, 106, 9, 59, 117, 0, 64, 63, 73, 183, 73, 0, 89, 0, 167, 127, 0, 47, 64, 53, 136, 123, 180, 187, 130, 55, 64, 191, 4, 148, 64, 187, 183, 183, 73, 0, 167, 0, 166, 129, 160, 57, 64, 55, 136, 123, 180, 187, 248, 106, 9, 59, 117, 0, 64, 63, 183, 183, 73, 0, 167, 0, 166, 129, 224, 56, 64, 53, 143, 168, 64, 191, 248, 106, 9, 59, 4, 148, 64, 187, 183, 183, 73, 0, 167, 0, 166, 129, 160, 57, 64, 53, 136, 123, 180, 187, 130, 55, 64, 191, 4, 148, 64, 187, 183, 184, 183, 0, 89, 0, 167, 129, 160, 57, 64, 55, 143, 168, 64, 191, 248, 106, 9, 59, 4, 148, 64, 187, 183, 184, 183, 0, 89, 0, 167, 129, 160, 57, 64, 53, 136, 123, 180, 187, 248, 106, 9, 59, 34, 0, 64, 191, 183, 184, 183, 0, 89, 0, 167, 129, 32, 58, 64, 53, 136, 123, 180, 187, 130, 55, 64, 191, 4, 148, 64, 187, 73, 183, 183, 0, 166, 0, 167, 127, 128, 50, 64, 55, 136, 123, 180, 187, 248, 106, 9, 59, 34, 0, 64, 191, 73, 183, 183, 0, 166, 0, 167, 127, 64, 52, 64, 53, 42, 88, 63, 63, 248, 106, 9, 59, 4, 148, 64, 187, 73, 183, 183, 0, 166, 0, 167, 127, 128, 50, 64, 53, 143, 168, 64, 191, 248, 106, 9, 59, 4, 148, 64, 187, 183, 73, 72, 0, 167, 0, 166, 129, 160, 57, 64, 53, 136, 123, 180, 187, 248, 106, 9, 59, 117, 0, 64, 63, 183, 73, 72, 0, 167, 0, 166, 129, 224, 56, 64, 53, 136, 123, 180, 187, 210, 200, 63, 63, 4, 148, 64, 187, 183, 73, 72, 0, 167, 0, 166, 129, 160, 57, 128, 50, 136, 123, 180, 187, 248, 106, 9, 59, 117, 0, 64, 63, 73, 73, 73, 0, 89, 0, 167, 127, 0, 47, 64, 53, 42, 88, 63, 63, 248, 106, 9, 59, 4, 148, 64, 187, 73, 73, 73, 0, 89, 0, 167, 127, 128, 50, 64, 53, 136, 123, 180, 187, 210, 200, 63, 63, 4, 148, 64, 187, 73, 73, 73, 0, 89, 0, 167, 127, 128, 50, 128, 50, 42, 88, 63, 63, 248, 106, 9, 59, 4, 148, 64, 187, 72, 73, 183, 0, 166, 0, 167, 127, 128, 50, 64, 53, 136, 123, 180, 187, 248, 106, 9, 59, 34, 0, 64, 191, 72, 73, 183, 0, 166, 0, 167, 127, 64, 52, 64, 53, 136, 123, 180, 187, 210, 200, 63, 63, 4, 148, 64, 187, 72, 73, 183, 0, 166, 0, 167, 127, 128, 50, 128, 50, 136, 123, 180, 187, 248, 106, 9, 59, 34, 0, 64, 191, 183, 73, 183, 0, 89, 0, 167, 129, 32, 58, 64, 53, 143, 168, 64, 191, 248, 106, 9, 59, 4, 148, 64, 187, 183, 73, 183, 0, 89, 0, 167, 129, 160, 57, 64, 53, 136, 123, 180, 187, 210, 200, 63, 63, 4, 148, 64, 187, 183, 73, 183, 0, 89, 0, 167, 129, 160, 57, 128, 50 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 15, 0, 17, 0, 16, 0, 18, 0, 20, 0, 19, 0, 21, 0, 23, 0, 22, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 24,
"material": SubResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 24
}

[sub_resource type="ConvexPolygonShape" id=4]
points = PoolVector3Array( -0.723404, 0.016698, -0.017498, -0.718022, -0.0181673, -0.0173673, -0.718021, 0.0165674, 0.0173673, -0.712637, -0.0180366, 0.0172366, -0.0548514, -0.0356809, -0.663159, -0.020096, -0.721523, -0.0173549, -0.0201012, 0.0165602, -0.720939, -0.020096, 0.016555, 0.720724, -0.0201012, 0.720139, -0.0173601, -0.0199643, -0.716099, 0.0172243, -0.0199705, -0.0180304, -0.715554, -0.0199643, -0.0180243, 0.715299, -0.0199705, 0.714754, 0.0172305, 0.0146327, -0.710674, 0.0170937, 0.0146398, -0.0179007, -0.710169, 0.0146327, -0.0178936, 0.709874, 0.0146398, 0.709369, 0.0171008, 0.0147644, -0.7161, -0.0172243, 0.0147706, 0.0164305, -0.715555, 0.0147644, 0.0164244, 0.7153, 0.0147706, 0.714755, -0.0172305, 0.707141, -0.0180294, 0.0172294, 0.712566, -0.0181611, -0.0173611, 0.712565, 0.0165611, 0.0173611, 0.717988, 0.0166928, -0.0174927 )

[node name="spark" type="RigidBody"]

[node name="spark" type="MeshInstance" parent="."]
transform = Transform( 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 0 )
mesh = SubResource( 3 )
material/0 = null

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 0 )
shape = SubResource( 4 )
