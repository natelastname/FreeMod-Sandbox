[gd_scene load_steps=11 format=2]

[ext_resource path="res://good_props/stool/stool_0.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF.001'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node1_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node1_out0_color;
	float node1_out1_alpha;
	
	node1_in0_vector = vec3(UV, 0.0);
	node_tex_image(node1_in0_vector, texture_0, node1_out0_color, node1_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node2_in0_basecolor = node1_out0_color;
	float node2_in1_subsurface = float(0.0);
	vec3 node2_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node2_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node2_in4_metallic = float(0.0);
	float node2_in5_specular = float(0.5);
	float node2_in6_speculartint = float(0.0);
	float node2_in7_roughness = float(0.5);
	float node2_in8_anisotropic = float(0.0);
	float node2_in9_anisotropicrotation = float(0.0);
	float node2_in10_sheen = float(0.0);
	float node2_in11_sheentint = float(0.5);
	float node2_in12_clearcoat = float(0.0);
	float node2_in13_clearcoatroughness = float(0.029999999329447746);
	float node2_in14_ior = float(1.4500000476837158);
	float node2_in15_transmission = float(0.0);
	float node2_in16_transmissionroughness = float(0.0);
	vec4 node2_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node2_in18_alpha = float(1.0);
	vec3 node2_in19_normal = NORMAL;
	vec3 node2_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node2_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node2_bsdf_out0_albedo;
	float node2_bsdf_out1_sss_strength;
	float node2_bsdf_out3_specular;
	float node2_bsdf_out2_metallic;
	float node2_bsdf_out4_roughness;
	float node2_bsdf_out5_clearcoat;
	float node2_bsdf_out6_clearcoat_gloss;
	float node2_bsdf_out7_anisotropy;
	float node2_bsdf_out8_transmission;
	float node2_bsdf_out9_ior;
	
	node_bsdf_principled(node2_in0_basecolor, node2_in1_subsurface,
		node2_in3_subsurfacecolor, node2_in4_metallic, node2_in5_specular,
		node2_in7_roughness, node2_in12_clearcoat, node2_in13_clearcoatroughness,
		node2_in8_anisotropic, node2_in15_transmission, node2_in14_ior,
		node2_bsdf_out0_albedo, node2_bsdf_out1_sss_strength, node2_bsdf_out2_metallic,
		node2_bsdf_out3_specular, node2_bsdf_out4_roughness, node2_bsdf_out5_clearcoat,
		node2_bsdf_out6_clearcoat_gloss, node2_bsdf_out7_anisotropy,
		node2_bsdf_out8_transmission, node2_bsdf_out9_ior);
	
	
	ALBEDO = node2_bsdf_out0_albedo;
	SSS_STRENGTH = node2_bsdf_out1_sss_strength;
	SPECULAR = node2_bsdf_out3_specular;
	METALLIC = node2_bsdf_out2_metallic;
	ROUGHNESS = node2_bsdf_out4_roughness;
	CLEARCOAT = node2_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node2_bsdf_out6_clearcoat_gloss;
	NORMAL = node2_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node2_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node2_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node2_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/texture_0 = ExtResource( 1 )

[sub_resource type="ArrayMesh" id=3]
resource_name = "stool"
surfaces/0 = {
"aabb": AABB( -6.86041, 0, -6.83713, 13.7227, 17.159, 13.7227 ),
"array_data": PoolByteArray( 233, 96, 140, 64, 0, 0, 0, 0, 140, 243, 197, 64, 0, 12, 126, 0, 127, 0, 0, 127, 23, 45, 182, 59, 61, 68, 147, 64, 84, 82, 115, 65, 167, 116, 151, 64, 0, 12, 126, 0, 127, 0, 0, 127, 15, 46, 219, 46, 168, 53, 63, 64, 84, 82, 115, 65, 167, 116, 151, 64, 0, 12, 126, 0, 127, 0, 0, 127, 23, 45, 219, 46, 61, 68, 147, 64, 84, 82, 115, 65, 167, 116, 151, 64, 0, 12, 126, 0, 127, 0, 0, 127, 15, 46, 219, 46, 233, 96, 140, 64, 0, 0, 0, 0, 140, 243, 197, 64, 0, 12, 126, 0, 127, 0, 0, 127, 23, 45, 182, 59, 139, 166, 200, 64, 0, 0, 0, 0, 140, 243, 197, 64, 0, 12, 126, 0, 127, 0, 0, 127, 139, 46, 182, 59, 168, 53, 63, 64, 84, 82, 115, 65, 167, 116, 151, 64, 166, 239, 169, 0, 88, 0, 165, 129, 162, 56, 219, 46, 61, 68, 147, 64, 84, 82, 115, 65, 179, 36, 68, 64, 166, 239, 169, 0, 88, 0, 165, 129, 240, 56, 219, 46, 139, 166, 200, 64, 0, 0, 0, 0, 186, 102, 139, 64, 166, 239, 169, 0, 88, 0, 165, 129, 0, 57, 182, 59, 233, 96, 140, 64, 0, 0, 0, 0, 140, 243, 197, 64, 169, 240, 166, 0, 91, 0, 168, 129, 162, 56, 182, 59, 168, 53, 63, 64, 84, 82, 115, 65, 167, 116, 151, 64, 169, 240, 166, 0, 91, 0, 168, 129, 162, 56, 219, 46, 139, 166, 200, 64, 0, 0, 0, 0, 186, 102, 139, 64, 169, 240, 166, 0, 91, 0, 168, 129, 0, 57, 182, 59, 61, 68, 147, 64, 84, 82, 115, 65, 179, 36, 68, 64, 126, 13, 0, 0, 0, 0, 129, 127, 131, 47, 219, 46, 61, 68, 147, 64, 84, 82, 115, 65, 167, 116, 151, 64, 126, 13, 0, 0, 0, 0, 129, 127, 15, 46, 219, 46, 139, 166, 200, 64, 0, 0, 0, 0, 140, 243, 197, 64, 126, 13, 0, 0, 0, 0, 129, 127, 139, 46, 182, 59, 61, 68, 147, 64, 84, 82, 115, 65, 179, 36, 68, 64, 126, 13, 0, 0, 0, 0, 129, 127, 131, 47, 219, 46, 139, 166, 200, 64, 0, 0, 0, 0, 140, 243, 197, 64, 126, 13, 0, 0, 0, 0, 129, 127, 139, 46, 182, 59, 139, 166, 200, 64, 0, 0, 0, 0, 186, 102, 139, 64, 126, 13, 0, 0, 0, 0, 129, 127, 0, 48, 182, 59, 233, 96, 140, 64, 0, 0, 0, 0, 140, 243, 197, 64, 0, 129, 0, 0, 127, 0, 0, 129, 23, 45, 182, 59, 139, 166, 200, 64, 0, 0, 0, 0, 186, 102, 139, 64, 0, 129, 0, 0, 127, 0, 0, 129, 0, 48, 182, 59, 139, 166, 200, 64, 0, 0, 0, 0, 140, 243, 197, 64, 0, 129, 0, 0, 127, 0, 0, 129, 139, 46, 182, 59, 233, 96, 140, 64, 0, 0, 0, 0, 159, 31, 198, 192, 0, 12, 130, 0, 129, 0, 0, 127, 217, 54, 182, 59, 168, 53, 63, 64, 84, 82, 115, 65, 186, 160, 151, 192, 0, 12, 130, 0, 129, 0, 0, 127, 217, 54, 219, 46, 61, 68, 147, 64, 84, 82, 115, 65, 186, 160, 151, 192, 0, 12, 130, 0, 129, 0, 0, 127, 124, 54, 219, 46, 139, 166, 200, 64, 0, 0, 0, 0, 159, 31, 198, 192, 0, 12, 130, 0, 129, 0, 0, 127, 124, 54, 182, 59, 233, 96, 140, 64, 0, 0, 0, 0, 159, 31, 198, 192, 0, 12, 130, 0, 129, 0, 0, 127, 217, 54, 182, 59, 61, 68, 147, 64, 84, 82, 115, 65, 186, 160, 151, 192, 0, 12, 130, 0, 129, 0, 0, 127, 124, 54, 219, 46, 139, 166, 200, 64, 0, 0, 0, 0, 157, 75, 141, 192, 166, 239, 87, 0, 168, 0, 165, 129, 15, 59, 182, 59, 61, 68, 147, 64, 84, 82, 115, 65, 217, 124, 68, 192, 166, 239, 87, 0, 168, 0, 165, 129, 15, 59, 219, 46, 168, 53, 63, 64, 84, 82, 115, 65, 186, 160, 151, 192, 166, 239, 87, 0, 168, 0, 165, 129, 108, 59, 219, 46, 233, 96, 140, 64, 0, 0, 0, 0, 159, 31, 198, 192, 170, 240, 91, 0, 164, 0, 169, 129, 108, 59, 182, 59, 139, 166, 200, 64, 0, 0, 0, 0, 157, 75, 141, 192, 170, 240, 91, 0, 164, 0, 169, 129, 15, 59, 182, 59, 168, 53, 63, 64, 84, 82, 115, 65, 186, 160, 151, 192, 170, 240, 91, 0, 164, 0, 169, 129, 108, 59, 219, 46, 139, 166, 200, 64, 0, 0, 0, 0, 159, 31, 198, 192, 126, 13, 0, 0, 0, 0, 129, 127, 124, 54, 182, 59, 61, 68, 147, 64, 84, 82, 115, 65, 186, 160, 151, 192, 126, 13, 0, 0, 0, 0, 129, 127, 124, 54, 219, 46, 61, 68, 147, 64, 84, 82, 115, 65, 217, 124, 68, 192, 126, 13, 0, 0, 0, 0, 129, 127, 31, 54, 219, 46, 139, 166, 200, 64, 0, 0, 0, 0, 157, 75, 141, 192, 126, 13, 0, 0, 0, 0, 129, 127, 31, 54, 182, 59, 139, 166, 200, 64, 0, 0, 0, 0, 159, 31, 198, 192, 126, 13, 0, 0, 0, 0, 129, 127, 124, 54, 182, 59, 61, 68, 147, 64, 84, 82, 115, 65, 217, 124, 68, 192, 126, 13, 0, 0, 0, 0, 129, 127, 31, 54, 219, 46, 139, 166, 200, 64, 0, 0, 0, 0, 159, 31, 198, 192, 0, 129, 0, 0, 127, 0, 0, 129, 62, 59, 182, 59, 139, 166, 200, 64, 0, 0, 0, 0, 157, 75, 141, 192, 0, 129, 0, 0, 127, 0, 0, 129, 15, 59, 182, 59, 233, 96, 140, 64, 0, 0, 0, 0, 159, 31, 198, 192, 0, 129, 0, 0, 127, 0, 0, 129, 108, 59, 182, 59, 169, 193, 52, 192, 162, 69, 137, 65, 151, 86, 220, 64, 0, 127, 0, 0, 0, 0, 130, 127, 0, 48, 231, 53, 63, 82, 56, 64, 162, 69, 137, 65, 151, 86, 220, 64, 0, 127, 0, 0, 244, 0, 130, 127, 0, 48, 109, 57, 225, 151, 219, 64, 162, 69, 137, 65, 225, 93, 54, 64, 0, 127, 0, 0, 254, 0, 130, 127, 108, 50, 85, 59, 225, 151, 219, 64, 162, 69, 137, 65, 7, 182, 54, 192, 0, 127, 0, 0, 0, 0, 130, 127, 201, 52, 85, 59, 123, 136, 219, 192, 162, 69, 137, 65, 129, 207, 57, 64, 0, 127, 0, 0, 2, 0, 130, 127, 108, 50, 48, 48, 123, 136, 219, 192, 162, 69, 137, 65, 103, 68, 51, 192, 0, 127, 0, 0, 0, 0, 129, 127, 201, 52, 48, 48, 123, 136, 219, 192, 162, 69, 137, 65, 129, 207, 57, 64, 0, 127, 0, 0, 0, 0, 129, 127, 108, 50, 48, 48, 225, 151, 219, 64, 162, 69, 137, 65, 7, 182, 54, 192, 0, 127, 0, 0, 0, 0, 129, 127, 201, 52, 85, 59, 72, 51, 56, 192, 162, 69, 137, 65, 197, 201, 218, 192, 0, 127, 0, 0, 254, 0, 130, 127, 0, 54, 231, 53, 123, 136, 219, 192, 162, 69, 137, 65, 103, 68, 51, 192, 0, 127, 0, 0, 251, 0, 130, 127, 201, 52, 48, 48, 225, 151, 219, 64, 162, 69, 137, 65, 7, 182, 54, 192, 0, 127, 0, 0, 2, 0, 130, 127, 201, 52, 85, 59, 118, 224, 52, 64, 162, 69, 137, 65, 197, 201, 218, 192, 0, 127, 0, 0, 11, 0, 130, 127, 0, 54, 109, 57, 118, 224, 52, 64, 162, 69, 137, 65, 197, 201, 218, 192, 89, 0, 166, 0, 127, 0, 0, 129, 0, 54, 109, 57, 225, 151, 219, 64, 162, 69, 137, 65, 7, 182, 54, 192, 89, 0, 166, 0, 127, 0, 0, 129, 201, 52, 85, 59, 225, 151, 219, 64, 2, 43, 113, 65, 7, 182, 54, 192, 89, 0, 166, 0, 127, 0, 0, 129, 201, 52, 85, 59, 118, 224, 52, 64, 2, 43, 113, 65, 197, 201, 218, 192, 89, 0, 166, 0, 127, 0, 0, 129, 0, 54, 109, 57, 225, 151, 219, 64, 162, 69, 137, 65, 7, 182, 54, 192, 127, 0, 0, 0, 127, 0, 0, 129, 201, 52, 85, 59, 225, 151, 219, 64, 162, 69, 137, 65, 225, 93, 54, 64, 127, 0, 0, 0, 127, 0, 0, 129, 108, 50, 85, 59, 225, 151, 219, 64, 2, 43, 113, 65, 225, 93, 54, 64, 127, 0, 0, 0, 127, 0, 0, 129, 108, 50, 85, 59, 225, 151, 219, 64, 2, 43, 113, 65, 7, 182, 54, 192, 127, 0, 0, 0, 127, 0, 0, 129, 201, 52, 85, 59, 225, 151, 219, 64, 162, 69, 137, 65, 225, 93, 54, 64, 90, 0, 89, 0, 127, 0, 0, 129, 108, 50, 85, 59, 63, 82, 56, 64, 162, 69, 137, 65, 151, 86, 220, 64, 90, 0, 89, 0, 127, 0, 0, 129, 0, 48, 109, 57, 63, 82, 56, 64, 2, 43, 113, 65, 151, 86, 220, 64, 90, 0, 89, 0, 127, 0, 0, 129, 0, 48, 109, 57, 225, 151, 219, 64, 2, 43, 113, 65, 225, 93, 54, 64, 90, 0, 89, 0, 127, 0, 0, 129, 108, 50, 85, 59, 63, 82, 56, 64, 162, 69, 137, 65, 151, 86, 220, 64, 0, 0, 127, 0, 127, 0, 0, 129, 0, 48, 109, 57, 169, 193, 52, 192, 162, 69, 137, 65, 151, 86, 220, 64, 0, 0, 127, 0, 127, 0, 0, 129, 0, 48, 231, 53, 169, 193, 52, 192, 2, 43, 113, 65, 151, 86, 220, 64, 0, 0, 127, 0, 127, 0, 0, 129, 0, 48, 231, 53, 63, 82, 56, 64, 2, 43, 113, 65, 151, 86, 220, 64, 0, 0, 127, 0, 127, 0, 0, 129, 0, 48, 109, 57, 169, 193, 52, 192, 162, 69, 137, 65, 151, 86, 220, 64, 167, 0, 90, 0, 127, 0, 0, 129, 0, 48, 231, 53, 123, 136, 219, 192, 162, 69, 137, 65, 129, 207, 57, 64, 167, 0, 90, 0, 127, 0, 0, 129, 108, 50, 48, 48, 123, 136, 219, 192, 2, 43, 113, 65, 129, 207, 57, 64, 167, 0, 90, 0, 127, 0, 0, 129, 108, 50, 48, 48, 169, 193, 52, 192, 2, 43, 113, 65, 151, 86, 220, 64, 167, 0, 90, 0, 127, 0, 0, 129, 0, 48, 231, 53, 123, 136, 219, 192, 162, 69, 137, 65, 129, 207, 57, 64, 129, 0, 0, 0, 127, 0, 0, 129, 108, 50, 48, 48, 123, 136, 219, 192, 162, 69, 137, 65, 103, 68, 51, 192, 129, 0, 0, 0, 127, 0, 0, 129, 201, 52, 48, 48, 123, 136, 219, 192, 2, 43, 113, 65, 103, 68, 51, 192, 129, 0, 0, 0, 127, 0, 0, 129, 201, 52, 48, 48, 123, 136, 219, 192, 2, 43, 113, 65, 129, 207, 57, 64, 129, 0, 0, 0, 127, 0, 0, 129, 108, 50, 48, 48, 123, 136, 219, 192, 162, 69, 137, 65, 103, 68, 51, 192, 166, 0, 167, 0, 127, 0, 0, 129, 100, 58, 48, 48, 72, 51, 56, 192, 162, 69, 137, 65, 197, 201, 218, 192, 166, 0, 167, 0, 127, 0, 0, 129, 0, 59, 231, 53, 72, 51, 56, 192, 2, 43, 113, 65, 197, 201, 218, 192, 166, 0, 167, 0, 127, 0, 0, 129, 0, 59, 231, 53, 123, 136, 219, 192, 162, 69, 137, 65, 103, 68, 51, 192, 166, 0, 167, 0, 127, 0, 0, 129, 201, 52, 48, 48, 72, 51, 56, 192, 2, 43, 113, 65, 197, 201, 218, 192, 166, 0, 167, 0, 127, 0, 0, 129, 0, 54, 231, 53, 123, 136, 219, 192, 2, 43, 113, 65, 103, 68, 51, 192, 166, 0, 167, 0, 127, 0, 0, 129, 201, 52, 48, 48, 72, 51, 56, 192, 162, 69, 137, 65, 197, 201, 218, 192, 0, 0, 129, 0, 127, 0, 0, 129, 0, 59, 231, 53, 118, 224, 52, 64, 162, 69, 137, 65, 197, 201, 218, 192, 0, 0, 129, 0, 127, 0, 0, 129, 0, 59, 109, 57, 118, 224, 52, 64, 2, 43, 113, 65, 197, 201, 218, 192, 0, 0, 129, 0, 127, 0, 0, 129, 0, 59, 109, 57, 72, 51, 56, 192, 2, 43, 113, 65, 197, 201, 218, 192, 0, 0, 129, 0, 127, 0, 0, 129, 0, 59, 231, 53, 225, 151, 219, 64, 2, 43, 113, 65, 225, 93, 54, 64, 0, 129, 0, 0, 254, 0, 130, 129, 155, 57, 85, 59, 63, 82, 56, 64, 2, 43, 113, 65, 151, 86, 220, 64, 0, 129, 0, 0, 244, 0, 130, 129, 0, 57, 109, 57, 169, 193, 52, 192, 2, 43, 113, 65, 151, 86, 220, 64, 0, 129, 0, 0, 0, 0, 130, 129, 0, 57, 231, 53, 225, 151, 219, 64, 2, 43, 113, 65, 7, 182, 54, 192, 0, 129, 0, 0, 0, 0, 130, 129, 100, 58, 85, 59, 123, 136, 219, 192, 2, 43, 113, 65, 129, 207, 57, 64, 0, 129, 0, 0, 2, 0, 130, 129, 155, 57, 48, 48, 225, 151, 219, 64, 2, 43, 113, 65, 7, 182, 54, 192, 0, 129, 0, 0, 0, 0, 129, 129, 100, 58, 85, 59, 123, 136, 219, 192, 2, 43, 113, 65, 129, 207, 57, 64, 0, 129, 0, 0, 0, 0, 129, 129, 155, 57, 48, 48, 123, 136, 219, 192, 2, 43, 113, 65, 103, 68, 51, 192, 0, 129, 0, 0, 0, 0, 129, 129, 100, 58, 48, 48, 225, 151, 219, 64, 2, 43, 113, 65, 7, 182, 54, 192, 0, 129, 0, 0, 251, 0, 130, 129, 100, 58, 85, 59, 123, 136, 219, 192, 2, 43, 113, 65, 103, 68, 51, 192, 0, 129, 0, 0, 251, 0, 130, 129, 100, 58, 48, 48, 72, 51, 56, 192, 2, 43, 113, 65, 197, 201, 218, 192, 0, 129, 0, 0, 251, 0, 130, 129, 0, 59, 231, 53, 225, 151, 219, 64, 2, 43, 113, 65, 7, 182, 54, 192, 0, 129, 0, 0, 11, 0, 130, 129, 100, 58, 85, 59, 72, 51, 56, 192, 2, 43, 113, 65, 197, 201, 218, 192, 0, 129, 0, 0, 11, 0, 130, 129, 0, 59, 231, 53, 118, 224, 52, 64, 2, 43, 113, 65, 197, 201, 218, 192, 0, 129, 0, 0, 11, 0, 130, 129, 0, 59, 109, 57, 110, 81, 140, 192, 0, 0, 0, 0, 140, 243, 197, 64, 0, 12, 126, 0, 129, 0, 0, 129, 38, 56, 182, 59, 177, 22, 63, 192, 84, 82, 115, 65, 167, 116, 151, 64, 0, 12, 126, 0, 129, 0, 0, 129, 54, 56, 219, 46, 215, 52, 147, 192, 84, 82, 115, 65, 167, 116, 151, 64, 0, 12, 126, 0, 129, 0, 0, 129, 85, 56, 219, 46, 36, 151, 200, 192, 0, 0, 0, 0, 140, 243, 197, 64, 0, 12, 126, 0, 129, 0, 0, 129, 100, 56, 182, 59, 110, 81, 140, 192, 0, 0, 0, 0, 140, 243, 197, 64, 0, 12, 126, 0, 129, 0, 0, 129, 38, 56, 182, 59, 215, 52, 147, 192, 84, 82, 115, 65, 167, 116, 151, 64, 0, 12, 126, 0, 129, 0, 0, 129, 85, 56, 219, 46, 36, 151, 200, 192, 0, 0, 0, 0, 186, 102, 139, 64, 90, 239, 169, 0, 168, 0, 165, 127, 155, 44, 182, 59, 215, 52, 147, 192, 84, 82, 115, 65, 179, 36, 68, 64, 90, 239, 169, 0, 168, 0, 165, 127, 31, 44, 219, 46, 177, 22, 63, 192, 84, 82, 115, 65, 167, 116, 151, 64, 90, 239, 169, 0, 168, 0, 165, 127, 201, 38, 219, 46, 110, 81, 140, 192, 0, 0, 0, 0, 140, 243, 197, 64, 87, 240, 166, 0, 165, 0, 168, 127, 217, 36, 182, 59, 36, 151, 200, 192, 0, 0, 0, 0, 186, 102, 139, 64, 87, 240, 166, 0, 165, 0, 168, 127, 155, 44, 182, 59, 177, 22, 63, 192, 84, 82, 115, 65, 167, 116, 151, 64, 87, 240, 166, 0, 165, 0, 168, 127, 201, 38, 219, 46, 36, 151, 200, 192, 0, 0, 0, 0, 140, 243, 197, 64, 130, 13, 0, 0, 0, 0, 129, 129, 100, 56, 182, 59, 215, 52, 147, 192, 84, 82, 115, 65, 167, 116, 151, 64, 130, 13, 0, 0, 0, 0, 129, 129, 85, 56, 219, 46, 215, 52, 147, 192, 84, 82, 115, 65, 179, 36, 68, 64, 130, 13, 0, 0, 0, 0, 129, 129, 131, 56, 219, 46, 36, 151, 200, 192, 0, 0, 0, 0, 186, 102, 139, 64, 130, 13, 0, 0, 0, 0, 129, 129, 147, 56, 182, 59, 36, 151, 200, 192, 0, 0, 0, 0, 140, 243, 197, 64, 130, 13, 0, 0, 0, 0, 129, 129, 100, 56, 182, 59, 215, 52, 147, 192, 84, 82, 115, 65, 179, 36, 68, 64, 130, 13, 0, 0, 0, 0, 129, 129, 131, 56, 219, 46, 36, 151, 200, 192, 0, 0, 0, 0, 140, 243, 197, 64, 0, 129, 0, 0, 127, 0, 0, 129, 77, 42, 182, 59, 36, 151, 200, 192, 0, 0, 0, 0, 186, 102, 139, 64, 0, 129, 0, 0, 127, 0, 0, 129, 155, 44, 182, 59, 110, 81, 140, 192, 0, 0, 0, 0, 140, 243, 197, 64, 0, 129, 0, 0, 127, 0, 0, 129, 217, 36, 182, 59, 215, 52, 147, 192, 84, 82, 115, 65, 186, 160, 151, 192, 0, 12, 130, 0, 127, 0, 0, 129, 170, 59, 219, 46, 177, 22, 63, 192, 84, 82, 115, 65, 186, 160, 151, 192, 0, 12, 130, 0, 127, 0, 0, 129, 217, 59, 219, 46, 110, 81, 140, 192, 0, 0, 0, 0, 159, 31, 198, 192, 0, 12, 130, 0, 127, 0, 0, 129, 217, 59, 182, 59, 215, 52, 147, 192, 84, 82, 115, 65, 186, 160, 151, 192, 0, 12, 130, 0, 127, 0, 0, 129, 170, 59, 219, 46, 110, 81, 140, 192, 0, 0, 0, 0, 159, 31, 198, 192, 0, 12, 130, 0, 127, 0, 0, 129, 217, 59, 182, 59, 36, 151, 200, 192, 0, 0, 0, 0, 159, 31, 198, 192, 0, 12, 130, 0, 127, 0, 0, 129, 170, 59, 182, 59, 177, 22, 63, 192, 84, 82, 115, 65, 186, 160, 151, 192, 90, 239, 87, 0, 88, 0, 165, 127, 178, 55, 219, 46, 215, 52, 147, 192, 84, 82, 115, 65, 217, 124, 68, 192, 90, 239, 87, 0, 88, 0, 165, 127, 248, 54, 219, 46, 36, 151, 200, 192, 0, 0, 0, 0, 157, 75, 141, 192, 90, 239, 87, 0, 88, 0, 165, 127, 248, 54, 182, 59, 177, 22, 63, 192, 84, 82, 115, 65, 186, 160, 151, 192, 86, 240, 91, 0, 92, 0, 169, 127, 178, 55, 219, 46, 36, 151, 200, 192, 0, 0, 0, 0, 157, 75, 141, 192, 86, 240, 91, 0, 92, 0, 169, 127, 248, 54, 182, 59, 110, 81, 140, 192, 0, 0, 0, 0, 159, 31, 198, 192, 86, 240, 91, 0, 92, 0, 169, 127, 178, 55, 182, 59, 215, 52, 147, 192, 84, 82, 115, 65, 217, 124, 68, 192, 130, 13, 0, 0, 0, 0, 129, 129, 124, 59, 219, 46, 215, 52, 147, 192, 84, 82, 115, 65, 186, 160, 151, 192, 130, 13, 0, 0, 0, 0, 129, 129, 170, 59, 219, 46, 36, 151, 200, 192, 0, 0, 0, 0, 159, 31, 198, 192, 130, 13, 0, 0, 0, 0, 129, 129, 170, 59, 182, 59, 215, 52, 147, 192, 84, 82, 115, 65, 217, 124, 68, 192, 130, 13, 0, 0, 0, 0, 129, 129, 124, 59, 219, 46, 36, 151, 200, 192, 0, 0, 0, 0, 159, 31, 198, 192, 130, 13, 0, 0, 0, 0, 129, 129, 170, 59, 182, 59, 36, 151, 200, 192, 0, 0, 0, 0, 157, 75, 141, 192, 130, 13, 0, 0, 0, 0, 129, 129, 124, 59, 182, 59, 110, 81, 140, 192, 0, 0, 0, 0, 159, 31, 198, 192, 0, 129, 0, 0, 127, 0, 0, 129, 178, 55, 182, 59, 36, 151, 200, 192, 0, 0, 0, 0, 157, 75, 141, 192, 0, 129, 0, 0, 127, 0, 0, 129, 248, 54, 182, 59, 36, 151, 200, 192, 0, 0, 0, 0, 159, 31, 198, 192, 0, 129, 0, 0, 127, 0, 0, 129, 85, 55, 182, 59 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 15, 0, 17, 0, 16, 0, 18, 0, 20, 0, 19, 0, 21, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 27, 0, 29, 0, 28, 0, 30, 0, 32, 0, 31, 0, 33, 0, 35, 0, 34, 0, 36, 0, 38, 0, 37, 0, 39, 0, 41, 0, 40, 0, 42, 0, 44, 0, 43, 0, 42, 0, 45, 0, 44, 0, 46, 0, 45, 0, 42, 0, 47, 0, 49, 0, 48, 0, 50, 0, 52, 0, 51, 0, 53, 0, 52, 0, 50, 0, 54, 0, 56, 0, 55, 0, 54, 0, 57, 0, 56, 0, 58, 0, 60, 0, 59, 0, 58, 0, 61, 0, 60, 0, 62, 0, 64, 0, 63, 0, 62, 0, 65, 0, 64, 0, 66, 0, 68, 0, 67, 0, 66, 0, 69, 0, 68, 0, 70, 0, 72, 0, 71, 0, 70, 0, 73, 0, 72, 0, 74, 0, 76, 0, 75, 0, 74, 0, 77, 0, 76, 0, 78, 0, 80, 0, 79, 0, 81, 0, 83, 0, 82, 0, 84, 0, 86, 0, 85, 0, 84, 0, 87, 0, 86, 0, 88, 0, 90, 0, 89, 0, 91, 0, 90, 0, 88, 0, 91, 0, 92, 0, 90, 0, 93, 0, 95, 0, 94, 0, 96, 0, 98, 0, 97, 0, 99, 0, 101, 0, 100, 0, 102, 0, 104, 0, 103, 0, 105, 0, 107, 0, 106, 0, 108, 0, 110, 0, 109, 0, 111, 0, 113, 0, 112, 0, 114, 0, 116, 0, 115, 0, 117, 0, 119, 0, 118, 0, 120, 0, 122, 0, 121, 0, 123, 0, 125, 0, 124, 0, 126, 0, 128, 0, 127, 0, 129, 0, 131, 0, 130, 0, 132, 0, 134, 0, 133, 0, 135, 0, 137, 0, 136, 0, 138, 0, 140, 0, 139, 0, 141, 0, 143, 0, 142, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 168,
"material": SubResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 144
}

[sub_resource type="ConvexPolygonShape" id=4]
points = PoolVector3Array( 2.88905, 15.073, 4.56944, 2.88905, 15.073, 4.93681, 2.95738, 13.5316, 4.74937, 2.95738, 13.5316, 4.92604, 2.95738, 14.24, 4.57303, 4.19573, 0.0890021, 5.98772, 4.19573, 0.0890021, 6.34172, 4.19573, 0.973348, 5.81039, 4.19573, 2.2126, 6.16439, 4.37306, -0.0884485, 6.34172, 4.54614, 15.073, 2.91234, 4.54973, 14.0625, 2.98068, 4.72607, 12.1164, 3.15768, 4.72966, 15.073, 2.91234, 4.72966, 15.073, 4.93681, 4.90274, 14.24, 3.15768, 4.90274, 14.24, 4.92604, 5.78709, 0.266453, 4.39636, 5.96442, 1.50425, 4.04235, 6.14142, -0.0884485, 4.21903, 6.31842, -0.0884485, 4.21903, 6.31842, -0.0884485, 6.34172, 6.31842, 0.266453, 6.34172, 6.31842, 1.3268, 4.21903, 6.31842, 1.3268, 6.16439 )

[sub_resource type="ConvexPolygonShape" id=5]
points = PoolVector3Array( 2.84625, 15.073, -5.00284, 2.88905, 15.073, -4.62573, 2.95738, 13.5316, -4.97946, 2.95738, 13.5316, -4.80244, 2.95738, 14.0625, -4.62573, 3.84238, 4.51219, -5.50989, 4.19573, 0.0890021, -6.21765, 4.19573, 0.0890021, -6.04063, 4.19573, 1.6817, -6.21765, 4.37306, -0.0884485, -6.21765, 4.54614, 15.073, -2.9694, 4.54973, -0.0884485, -5.68691, 4.54973, 13.7091, -3.03413, 4.72607, 14.5934, -4.97946, 4.72966, 15.073, -4.80962, 4.72966, 15.073, -2.9694, 4.90274, 14.24, -4.97946, 4.90274, 14.24, -3.03413, 5.61075, 7.51576, -3.56487, 5.78709, 0.266453, -4.44934, 6.14142, -0.0884485, -4.27232, 6.14142, 1.50425, -4.09561, 6.14142, 1.6817, -6.21765, 6.24383, 0.24133, -6.147, 6.31842, -0.0884485, -4.27232, 6.31842, 1.3268, -6.21765, 6.31842, 1.3268, -4.27232 )

[sub_resource type="ConvexPolygonShape" id=6]
points = PoolVector3Array( -6.41781, -0.0884485, 4.21903, -6.41781, -0.0884485, 6.34172, -6.41781, 0.266453, 6.34172, -6.24086, 1.50425, 4.04235, -6.24086, 2.03515, 4.04235, -6.24086, 2.03515, 6.16439, -6.06391, -0.0884485, 4.21903, -6.06391, 2.2126, 6.16439, -4.8328, 15.073, 2.91234, -4.82562, 13.3556, 5.10337, -4.82562, 14.7709, 4.92604, -4.45639, 15.073, 2.82461, -4.29581, -0.0884485, 5.98772, -4.29581, -0.0884485, 6.34172, -4.29581, 0.44245, 5.81039, -4.11886, 0.797352, 5.98772, -4.11886, 2.2126, 6.16439, -3.87625, 15.073, 3.40529, -2.76326, 15.073, 4.5672, -2.71596, 15.073, 4.75756, -2.71596, 15.073, 4.95064 )

[sub_resource type="ConvexPolygonShape" id=7]
points = PoolVector3Array( -6.41781, -0.0884485, -6.21765, -6.41781, -0.0884485, -4.27232, -6.24086, 1.6817, -6.21765, -6.24086, 2.03515, -6.04063, -6.24086, 2.03515, -4.09561, -6.06391, -0.0884485, -4.27232, -5.35646, 9.46336, -3.38816, -5.00257, 9.63936, -3.38816, -4.8328, 15.073, -4.80962, -4.8328, 15.073, -2.9694, -4.82562, 14.5934, -4.97946, -4.47276, 14.24, -3.03413, -4.46559, 15.073, -2.9694, -4.29581, -0.0884485, -6.21765, -4.29581, 0.266453, -5.86361, -4.11886, 0.797352, -6.21765, -4.11886, 1.1508, -5.86361, -4.11886, 1.6817, -6.21765, -2.71596, 15.073, -5.01229, -2.71596, 15.073, -4.62572 )

[sub_resource type="ConvexPolygonShape" id=8]
points = PoolVector3Array( 1.8965, 14.9481, -6.92555, 1.8965, 14.9481, 7.04931, 2.07922, 17.159, -6.42773, 2.07922, 17.159, 6.55149, 2.95795, 14.7711, -4.80114, 2.95795, 14.7711, 4.92627, 2.95795, 14.9481, -6.92555, 2.95795, 14.9481, 7.04931, 3.06505, 17.159, -6.42773, 3.06505, 17.159, 6.55149, 4.05088, 17.159, 5.5656, 4.72586, 14.7711, -4.80114, 4.72586, 14.7711, 4.92627, 6.72407, 15.073, -2.66812, 6.72407, 15.073, 2.63619, 6.84328, 17.159, -2.81195, 6.84328, 17.159, 2.77181 )

[sub_resource type="ConvexPolygonShape" id=9]
points = PoolVector3Array( -6.63377, 17.159, -2.81194, -6.63377, 17.159, 2.93697, -6.42739, 15.073, -2.66755, -6.42739, 15.073, 2.79251, -4.63905, 14.7766, -4.77958, -4.58069, 14.8107, 4.77092, -3.01853, 17.159, -6.42772, -2.99381, 15.073, -6.10165, -2.87966, 14.7711, -4.80114, -2.87966, 14.7711, 4.92627, -2.8545, 17.159, 6.55148, -2.83801, 15.073, 6.22541, 1.18779, 14.9479, -6.92555, 1.18779, 14.9479, 7.04931, 1.58092, 17.159, -6.42772, 1.58092, 17.159, 6.55148, 1.896, 14.9481, -6.92555, 1.896, 14.9481, 7.04931 )

[node name="stool" type="RigidBody"]

[node name="stool" type="MeshInstance" parent="."]
transform = Transform( 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 0 )
mesh = SubResource( 3 )
material/0 = null

[node name="CollisionShape6" type="CollisionShape" parent="."]
transform = Transform( 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 0 )
shape = SubResource( 4 )

[node name="CollisionShape5" type="CollisionShape" parent="."]
transform = Transform( 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 0 )
shape = SubResource( 5 )

[node name="CollisionShape4" type="CollisionShape" parent="."]
transform = Transform( 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 0 )
shape = SubResource( 6 )

[node name="CollisionShape3" type="CollisionShape" parent="."]
transform = Transform( 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 0 )
shape = SubResource( 7 )

[node name="CollisionShape2" type="CollisionShape" parent="."]
transform = Transform( 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 0 )
shape = SubResource( 8 )

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 0 )
shape = SubResource( 9 )
